import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-55dec57a.js";const t="/blog/assets/esp-wroom-32-13049b72.png",p="/blog/assets/breadboard-a948d2df.png",o="/blog/assets/led-circuit-diagram-b34c0d88.png",c="/blog/assets/led-success-740d1890.png",i={},l=e('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>本文主要介绍如何使用<code>ESP32</code>的<code>GPIO</code>输出控制<code>LED</code>灯。</p><h2 id="硬件准备" tabindex="-1"><a class="header-anchor" href="#硬件准备" aria-hidden="true">#</a> 硬件准备</h2><ul><li>ESP32开发板</li><li>LED灯</li><li>220欧姆电阻</li><li>杜邦线若干</li><li>面包板</li></ul><h2 id="esp-wroom-32引脚图" tabindex="-1"><a class="header-anchor" href="#esp-wroom-32引脚图" aria-hidden="true">#</a> ESP-WROOM-32引脚图</h2><figure><img src="'+t+'" alt="esp-wroom-32" tabindex="0" loading="lazy"><figcaption>esp-wroom-32</figcaption></figure><h2 id="面包板介绍" tabindex="-1"><a class="header-anchor" href="#面包板介绍" aria-hidden="true">#</a> 面包板介绍</h2><p>面包板是一种用于快速搭建电路的工具，可以将电路板上的引脚连接到面包板上，通过面包板上的导线连接到其他引脚上，从而快速搭建电路。</p><figure><img src="'+p+'" alt="breadboard" tabindex="0" loading="lazy"><figcaption>breadboard</figcaption></figure><h2 id="电路图" tabindex="-1"><a class="header-anchor" href="#电路图" aria-hidden="true">#</a> 电路图</h2><p><code>ESP32</code>的<code>GPIO</code>输出电压为<code>3.3V</code>，LED灯的额定电压为<code>2V</code>，额定电流为<code>20mA</code>，因此需要串联一个<code>220欧姆</code>的电阻。<code>GPIO5</code>的编号为<code>05</code>，对应的引脚连接电阻，电阻连接<code>LED</code>灯，<code>LED</code>灯的另一端连接<code>GND</code>接地。</p><figure><img src="'+o+`" alt="示例电路图" tabindex="0" loading="lazy"><figcaption>示例电路图</figcaption></figure><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/FreeRTOS.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/task.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/queue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;driver/gpio.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO5_OUTPUT_IO</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO_OUTPUT_PIN_SEL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> GPIO5_OUTPUT_IO<span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">app_led_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">led_int</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// zero-initialize the config structure.</span>
    <span class="token class-name">gpio_config_t</span> io_conf <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// disable interrupt</span>
    io_conf<span class="token punctuation">.</span>intr_type <span class="token operator">=</span> GPIO_INTR_DISABLE<span class="token punctuation">;</span>
    <span class="token comment">// set as output mode</span>
    io_conf<span class="token punctuation">.</span>mode <span class="token operator">=</span> GPIO_MODE_OUTPUT<span class="token punctuation">;</span>
    <span class="token comment">// bit mask of the pins that you want to set,e.g.GPIO5</span>
    io_conf<span class="token punctuation">.</span>pin_bit_mask <span class="token operator">=</span> GPIO_OUTPUT_PIN_SEL<span class="token punctuation">;</span>
    <span class="token comment">// disable pull-down mode</span>
    io_conf<span class="token punctuation">.</span>pull_down_en <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// disable pull-up mode</span>
    io_conf<span class="token punctuation">.</span>pull_up_en <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// configure GPIO with the given settings</span>
    <span class="token function">gpio_config</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>io_conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">app_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token function">led_int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Minimum free heap size: %ld bytes\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">esp_get_minimum_free_heap_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">xTaskCreate</span><span class="token punctuation">(</span>app_led_task<span class="token punctuation">,</span> <span class="token string">&quot;app_led_task&quot;</span><span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">app_led_task</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pvParameters<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;cnt: %d\\n&quot;</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> portTICK_PERIOD_MS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>GPIO5_OUTPUT_IO<span class="token punctuation">,</span> cnt <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最终成果" tabindex="-1"><a class="header-anchor" href="#最终成果" aria-hidden="true">#</a> 最终成果</h2><figure><img src="`+c+'" alt="点亮LED灯" tabindex="0" loading="lazy"><figcaption>点亮LED灯</figcaption></figure>',16),r=[l];function d(u,k){return s(),a("div",null,r)}const b=n(i,[["render",d],["__file","led.html.vue"]]);export{b as default};
