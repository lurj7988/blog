import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,d as s,e as n,b as t,a as d}from"./app-09c6fd40.js";const r="/blog/assets/images/qsv.jpg",i={},l=d('<h1 id="揭秘爱奇艺qsv文件背后的秘密" tabindex="-1"><a class="header-anchor" href="#揭秘爱奇艺qsv文件背后的秘密" aria-hidden="true">#</a> 揭秘爱奇艺qsv文件背后的秘密</h1><p>想做影视二次剪辑的朋友，想获取爱奇艺的高清资源吗？想知道如何将qsv文件导入剪映吗？本文带大家揭秘爱奇艺qsv文件背后的秘密，文章最后提供了绿色免费的转换工具可以将qsv文件转换为可剪辑的flv或MP4文件。</p><h2 id="什么是qsv文件" tabindex="-1"><a class="header-anchor" href="#什么是qsv文件" aria-hidden="true">#</a> 什么是qsv文件</h2><p>QSV是一种加密的视频文件格式。是爱奇艺公司研发的一种视频文件格式，故QSV格式只能使用奇艺客户端、爱奇艺万能播放器播放。因此想要将QSV文件转换成其他格式的视频文件就需要知道QSV文件的加密方式，通过查阅相关资料和研究得出了一些结论。</p><p>QSV文件包含头部信息、索引信息、json字符串以及视频分段信息。</p><figure><img src="'+r+`" alt="qsv.jpg" tabindex="0" loading="lazy"><figcaption>qsv.jpg</figcaption></figure><h2 id="头部信息" tabindex="-1"><a class="header-anchor" href="#头部信息" aria-hidden="true">#</a> 头部信息</h2><p>头部信息为整个QSV文件的前90字节。包含标识符、版本号、视频ID、json字符串的绝对文件偏移和大小、视频索引信息的数量。</p><table><thead><tr><th>偏移（绝对文件地址）</th><th>长度（字节）</th><th>字段名</th><th>解释</th></tr></thead><tbody><tr><td>0x0</td><td>0xA</td><td>signature</td><td>标识符，&quot;QIYI VIDEO&quot;</td></tr><tr><td>0xA</td><td>0x4</td><td>version</td><td>版本号，0x01或0x02</td></tr><tr><td>0xE</td><td>0x10</td><td>vid</td><td>视频ID</td></tr><tr><td>0x1E</td><td>0x4</td><td>_unknown1</td><td>未知，必须为0x01</td></tr><tr><td>0x22</td><td>0x20</td><td>_unknown2</td><td>未知，全部为0x00</td></tr><tr><td>0x42</td><td>0x4</td><td>_unknown3</td><td>未知，待分析</td></tr><tr><td>0x46</td><td>0x4</td><td>_unknown4</td><td>未知，待分析</td></tr><tr><td>0x4A</td><td>0x8</td><td>json_offset</td><td><a href="#json%E5%AD%97%E7%AC%A6%E4%B8%B2">json字符串</a>的的绝对文件偏移</td></tr><tr><td>0x52</td><td>0x4</td><td>json_size</td><td><a href="#json%E5%AD%97%E7%AC%A6%E4%B8%B2">json字符串</a>的的大小</td></tr><tr><td>0x56</td><td>0x4</td><td>nb_indices</td><td>视频<a href="#%E7%B4%A2%E5%BC%95%E4%BF%A1%E6%81%AF">索引信息</a>的数量</td></tr></tbody></table><h2 id="索引信息" tabindex="-1"><a class="header-anchor" href="#索引信息" aria-hidden="true">#</a> 索引信息</h2><table><thead><tr><th>偏移（绝对文件地址）</th><th>长度（字节）</th><th>字段名</th><th>解释</th></tr></thead><tbody><tr><td>0x5A</td><td>nb_indices + 7) &gt;&gt;3</td><td>_unknown_flag</td><td>位标识，一个索引对应一位，待分析</td></tr><tr><td>上一字段之后</td><td>nb_indices * 0x1C</td><td>indices</td><td>索引结构体数组</td></tr></tbody></table><p>每个索引结构体的大小为0x1C，经过加密，记录<a href="#%E8%A7%86%E9%A2%91%E5%88%86%E6%AE%B5%E4%BF%A1%E6%81%AF">视频分段信息</a>的偏移和大小。</p><table><thead><tr><th>偏移（相对于结构体首地址）</th><th>长度（字节）</th><th>字段名</th><th>解释</th></tr></thead><tbody><tr><td>0x0</td><td>0x10</td><td>_codetable</td><td>用于后面两个字段的解密</td></tr><tr><td>0x10</td><td>0x8</td><td>segment_offset</td><td>视频分段的绝对文件偏移</td></tr><tr><td>0x18</td><td>0x4</td><td>segment_size</td><td>视频分段的大小</td></tr></tbody></table><h2 id="json字符串" tabindex="-1"><a class="header-anchor" href="#json字符串" aria-hidden="true">#</a> json字符串</h2><p>通过头部信息中的json字符串的的绝对文件偏移和大小获取。字符串为加密数据，需要进行解密，解密算法如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// decryption algorithm for some segments in qsv version 0x1</span>
<span class="token keyword">void</span> <span class="token function">decrypt_1</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span> buffer<span class="token punctuation">,</span> DWORD size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> BYTE dict<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DWORD j <span class="token operator">=</span> <span class="token operator">~</span>i <span class="token operator">&amp;</span> <span class="token number">0x3</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="视频分段信息" tabindex="-1"><a class="header-anchor" href="#视频分段信息" aria-hidden="true">#</a> 视频分段信息</h2><p>一个qsv文件包含多段视频文件，通过<a href="#%E7%B4%A2%E5%BC%95%E4%BF%A1%E6%81%AF">索引信息</a>中的segment_offset和segment_size定位，前0x400字节经过加密。老版本解密算法同<a href="#json%E5%AD%97%E7%AC%A6%E4%B8%B2">json字符串</a>，新版本的解密算法为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// decryption algorithm for some segments in qsv version 0x2</span>
<span class="token keyword">void</span> <span class="token function">decrypt_2</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span> buffer<span class="token punctuation">,</span> DWORD size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DWORD x <span class="token operator">=</span> <span class="token number">0x62677079</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>DWORD i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">^=</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>DWORD i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">^=</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DWORD j <span class="token operator">=</span> x <span class="token operator">%</span> i<span class="token punctuation">;</span>
        BYTE tmp <span class="token operator">=</span> buffer<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">^</span> <span class="token punctuation">(</span>BYTE<span class="token punctuation">)</span><span class="token operator">~</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已发现的视频格式有flv（旧版客户端）、mpeg-ts（新版客户端）。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>提取出QSV文件中的视频信息后需要转换其他格式，则需要ffmpeg神器了。这里提供的免费转换工具已经集成了ffmpeg，可以直接将QSV文件转换为MP4，关注公众号<code>OriginalTech</code>回复QSV获取。</p><p>需要注意的是<strong>最新版</strong>爱奇艺客户端(10.0以上版本)下载的QSV文件采用了<strong>全新的加密方式</strong>，目前还转换。我们也提供老版本的爱奇艺客户端，关注公众号<code>OriginalTech</code>回复QIYI获取。</p><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记" aria-hidden="true">#</a> 后记</h2>`,24),u={href:"https://github.com/btnkij/qsv2flv.git",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/btnkij/qsv2flv.git",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,[n("该项目采用"),s("code",null,"c"),n("语言和"),s("code",null,"Qt"),n("开发，为了帮助不会"),s("code",null,"c"),n("的"),s("code",null,"Java"),n("开发理解，作者翻译了"),s("code",null,"Java"),n("版本，关注我下一篇带你手把手撸一遍。")],-1);function v(b,m){const a=p("ExternalLinkIcon");return o(),c("div",null,[l,s("p",null,[n("本文参考开源项目"),s("a",u,[n("qsv2flv"),t(a)]),n("，项目地址："),s("a",k,[n("https://github.com/btnkij/qsv2flv.git"),t(a)])]),h])}const g=e(i,[["render",v],["__file","qsv.html.vue"]]);export{g as default};
