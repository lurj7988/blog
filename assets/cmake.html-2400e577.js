const e=JSON.parse('{"key":"v-190004b0","path":"/backend/cpp/cmake.html","title":"cmake","lang":"zh-CN","frontmatter":{"title":"cmake","icon":"markdown","order":2,"date":"2023-06-07T00:00:00.000Z","category":["后端技术"],"tag":["c++"],"description":"一、准备知识 1.1 C++的编译过程 使用g++等编译工具，从源码生成最终的可执行文件一般有这几步：预处理（Preprocess）、编译（Compile）、汇编（assemble）、链接（link）。 imgcompile.jpg 输入g++ --help可以看到对应命令： -E Preprocess only; do not compile, assemble or link. -S Compile only; do not assemble or link. -c Compile and assemble, but do not link. -o &lt;file&gt; Place the output into &lt;file&gt;.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/backend/cpp/cmake.html"}],["meta",{"property":"og:site_name","content":"Original Tech"}],["meta",{"property":"og:title","content":"cmake"}],["meta",{"property":"og:description","content":"一、准备知识 1.1 C++的编译过程 使用g++等编译工具，从源码生成最终的可执行文件一般有这几步：预处理（Preprocess）、编译（Compile）、汇编（assemble）、链接（link）。 imgcompile.jpg 输入g++ --help可以看到对应命令： -E Preprocess only; do not compile, assemble or link. -S Compile only; do not assemble or link. -c Compile and assemble, but do not link. -o &lt;file&gt; Place the output into &lt;file&gt;."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-26T03:27:40.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"cmake"}],["meta",{"property":"article:author","content":"lurj"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:published_time","content":"2023-06-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-26T03:27:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cmake\\",\\"image\\":[\\"https://mister-hope.github.io/blog/\\"],\\"datePublished\\":\\"2023-06-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-26T03:27:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"lurj\\",\\"url\\":\\"https://www.lurj7988.cn\\"}]}"]]},"headers":[{"level":2,"title":"一、准备知识","slug":"一、准备知识","link":"#一、准备知识","children":[{"level":3,"title":"1.1 C++的编译过程","slug":"_1-1-c-的编译过程","link":"#_1-1-c-的编译过程","children":[]},{"level":3,"title":"1.2 静态链接库和动态链接库","slug":"_1-2-静态链接库和动态链接库","link":"#_1-2-静态链接库和动态链接库","children":[]},{"level":3,"title":"1.3 为什么需要CMake","slug":"_1-3-为什么需要cmake","link":"#_1-3-为什么需要cmake","children":[]}]},{"level":2,"title":"二、CMake基础知识","slug":"二、cmake基础知识","link":"#二、cmake基础知识","children":[{"level":3,"title":"2.1 安装","slug":"_2-1-安装","link":"#_2-1-安装","children":[]},{"level":3,"title":"2.2 第一个CMake例子","slug":"_2-2-第一个cmake例子","link":"#_2-2-第一个cmake例子","children":[]},{"level":3,"title":"2.3 语法基础","slug":"_2-3-语法基础","link":"#_2-3-语法基础","children":[]}]},{"level":2,"title":"三、opencv CMake示例","slug":"三、opencv-cmake示例","link":"#三、opencv-cmake示例","children":[]}],"git":{"createdTime":1686042095000,"updatedTime":1687750060000,"contributors":[{"name":"lurj","email":"naulurenjie@outlook.com","commits":2}]},"readingTime":{"minutes":13.81,"words":4144},"filePathRelative":"backend/cpp/cmake.md","localizedDate":"2023年6月7日","excerpt":"<h2> 一、准备知识</h2>\\n<h3> 1.1 C++的编译过程</h3>\\n<p>使用<code>g++</code>等编译工具，从源码生成最终的可执行文件一般有这几步：预处理（Preprocess）、编译（Compile）、汇编（assemble）、链接（link）。</p>\\n<figure><figcaption>imgcompile.jpg</figcaption></figure>\\n<blockquote>\\n<p>输入<code>g++ --help</code>可以看到对应命令：</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token parameter variable\\">-E</span>                       Preprocess only<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">do</span> not compile, assemble or link.\\n<span class=\\"token parameter variable\\">-S</span>                       Compile only<span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">do</span> not assemble or link.\\n<span class=\\"token parameter variable\\">-c</span>                       Compile and assemble, but <span class=\\"token keyword\\">do</span> not link.\\n<span class=\\"token parameter variable\\">-o</span> <span class=\\"token operator\\">&lt;</span>file<span class=\\"token operator\\">&gt;</span>                Place the output into <span class=\\"token operator\\">&lt;</span>file<span class=\\"token operator\\">&gt;</span>.\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></blockquote>","autoDesc":true}');export{e as data};
