import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-55dec57a.js";const t="/blog/assets/28BYJ-48-4ff535f1.png",e="/blog/assets/28BYJ-48-1-427d0780.png",o="/blog/assets/ULN2003-6281004c.png",c="/blog/assets/28BYJ-48-2-bd095934.png",l="/blog/assets/28BYJ-48-3-217acade.jpg",i={},u=p('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>本文主要介绍如何使用<code>ESP32</code>的<code>GPIO</code>输出控制步进电机。</p><h2 id="硬件准备" tabindex="-1"><a class="header-anchor" href="#硬件准备" aria-hidden="true">#</a> 硬件准备</h2><ul><li>ESP32开发板</li><li>步进电机</li><li>ULN2003驱动板</li><li>杜邦线若干</li><li>面包板</li></ul><h2 id="步进电机介绍" tabindex="-1"><a class="header-anchor" href="#步进电机介绍" aria-hidden="true">#</a> 步进电机介绍</h2><p>首先来看一下步进电机的样子，本文介绍采用平时最常见也是最简单的28BYJ-48，这是一个五线四项电机。</p><p>五线：顾名思义外部五条线。</p><p>四项：电机内部的定子上有8个齿，正对着的2个齿上的绕组又是串联在一起的，也就是说正对着的2个绕组总是会同时导通或关断的，如此就形成了4相。</p><figure><img src="'+t+'" alt="28BYJ-48" tabindex="0" loading="lazy"><figcaption>28BYJ-48</figcaption></figure><h2 id="步进电机原理" tabindex="-1"><a class="header-anchor" href="#步进电机原理" aria-hidden="true">#</a> 步进电机原理</h2><p>步进电机是一种将电脉冲信号转换成相应角位移或线位移的电动机。每输入一个脉冲信号，转子就转动一个角度或前进一步，其输出的角位移或线位移与输入的脉冲数成正比，转速与脉冲频率成正比。</p><p><strong>通俗易懂的说：就是给不同的项轮流通电，在电磁感应的作用下，每次产生一个很小的角位移，连贯起来就带动了电机的转动，从而驱动负载。</strong></p><figure><img src="'+e+'" alt="原理图" tabindex="0" loading="lazy"><figcaption>原理图</figcaption></figure><p>ABCD为定子，上面绕有线圈，为四相，与之相对应的对面四个定子上面也有线圈，相对应的两个定子之间线圈是相互连接形成一个绕组。</p><h3 id="单四拍模式" tabindex="-1"><a class="header-anchor" href="#单四拍模式" aria-hidden="true">#</a> 单四拍模式</h3><p>如当前为初始状态，B相导通，对0的吸引力最大。</p><p>接下来B断开，C导通，1和C相之间夹角最小被吸引过去，被吸引过去之前2和D相之间夹角为1和C相之间夹角的2倍，1被吸引到C以后，2和D之间最近，此时0和A之间的夹角为2和D之间的2倍，</p><p>接下来C断开，D导通，2被吸引到D，此时0距离A最近</p><p>D断开A导通，0被吸引到A相，至此一个周期完成</p><h3 id="双拍工作模式" tabindex="-1"><a class="header-anchor" href="#双拍工作模式" aria-hidden="true">#</a> 双拍工作模式</h3><p>每次给两个线圈通电，通过改变通电的线圈从而使步进电机转动 五线四相步进电机：在双拍工作方式下，线圈的通电方式依次是：AB、BC、CD、DA 即单拍工作方式下，线圈的通电方式依次是：A、B、C、D</p><h3 id="单双拍-八拍工作方式" tabindex="-1"><a class="header-anchor" href="#单双拍-八拍工作方式" aria-hidden="true">#</a> 单双拍（八拍工作方式）</h3><p>单双拍工作方式就是单拍工作方式和双拍工作方式交替进行。 五线四相步进电机：A、AB、B、BC、C、CD、D、DA</p><h2 id="步进电机驱动板" tabindex="-1"><a class="header-anchor" href="#步进电机驱动板" aria-hidden="true">#</a> 步进电机驱动板</h2><figure><img src="'+o+'" alt="ULN2003" tabindex="0" loading="lazy"><figcaption>ULN2003</figcaption></figure><h2 id="电路图" tabindex="-1"><a class="header-anchor" href="#电路图" aria-hidden="true">#</a> 电路图</h2><figure><img src="'+c+`" alt="示例电路图" tabindex="0" loading="lazy"><figcaption>示例电路图</figcaption></figure><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><p>在使用<code>esp-idf v5.0.1</code>框架开发<code>28BYJ-48</code>步进电机驱动时，发现使用延时产生脉冲驱动<code>ULN2003</code>，其最快延时到<code>10ms</code>，再小一点都无法驱动步进电机，<code>gpio</code>口也没有输出，相比之下51单片机使用延时可以正常的工作，esp32驱动的步进电机太慢了。其具体原因尚不明白，后来采用定时器产生脉冲，最终得以解决。以下内容则包含硬件通用定时器的简单驱动程序。（注：使用的<code>v5.0.1</code>版本，低版本可能无法使用）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/FreeRTOS.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/task.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;freertos/queue.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;driver/gpio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;driver/gptimer.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;esp_log.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOTOR_PIN_A</span> <span class="token expression">GPIO_NUM_27</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOTOR_PIN_B</span> <span class="token expression">GPIO_NUM_14</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOTOR_PIN_C</span> <span class="token expression">GPIO_NUM_12</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOTOR_PIN_D</span> <span class="token expression">GPIO_NUM_13</span></span>

<span class="token comment">// 目标步数（剩余步数）</span>
<span class="token keyword">static</span> <span class="token class-name">uint32_t</span> target_step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 电机方向</span>
<span class="token keyword">static</span> <span class="token class-name">int8_t</span> direction <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>TAG <span class="token operator">=</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义步进电机的时序（一二相励磁方式）</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">uint8_t</span> step_sequence<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Step 1</span>
    <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Step 2</span>
    <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Step 3</span>
    <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Step 4</span>
    <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">motor_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">gpio_config_t</span> io_conf <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 禁用中断</span>
    io_conf<span class="token punctuation">.</span>intr_type <span class="token operator">=</span> GPIO_INTR_DISABLE<span class="token punctuation">;</span>
    <span class="token comment">// 设置为输出模式</span>
    io_conf<span class="token punctuation">.</span>mode <span class="token operator">=</span> GPIO_MODE_OUTPUT<span class="token punctuation">;</span>
    io_conf<span class="token punctuation">.</span>pull_down_en <span class="token operator">=</span> GPIO_PULLDOWN_DISABLE<span class="token punctuation">;</span>
    io_conf<span class="token punctuation">.</span>pull_up_en <span class="token operator">=</span> GPIO_PULLUP_DISABLE<span class="token punctuation">;</span>
    <span class="token comment">// 配置GPIO</span>
    io_conf<span class="token punctuation">.</span>pin_bit_mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> MOTOR_PIN_A<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> MOTOR_PIN_B<span class="token punctuation">)</span> <span class="token operator">|</span>
                           <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> MOTOR_PIN_C<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> MOTOR_PIN_D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gpio_config</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>io_conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> bool IRAM_ATTR <span class="token function">step_timer_inr</span><span class="token punctuation">(</span><span class="token class-name">gptimer_handle_t</span> timer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">gptimer_alarm_event_data_t</span> <span class="token operator">*</span>edata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BaseType_t high_task_awoken <span class="token operator">=</span> pdFALSE<span class="token punctuation">;</span>
    <span class="token comment">// ESP_LOGI(TAG, &quot;%lu&quot;, target_step);</span>
    <span class="token comment">// ESP_LOGI(TAG, &quot;11111&quot;);</span>
    <span class="token comment">// 相序下标</span>
    <span class="token keyword">static</span> <span class="token class-name">int8_t</span> phase_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>direction<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token punctuation">{</span> <span class="token comment">// 顺时针旋转</span>
        phase_index<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase_index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            phase_index <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_A<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_B<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_C<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_D<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        target_step<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target_step <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            direction <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
    <span class="token punctuation">{</span> <span class="token comment">// 逆时针旋转</span>
        phase_index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase_index <span class="token operator">&gt;=</span> <span class="token number">8</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            phase_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_A<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_B<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_C<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>MOTOR_PIN_D<span class="token punctuation">,</span> <span class="token punctuation">(</span>step_sequence<span class="token punctuation">[</span>phase_index<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        target_step<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target_step <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            direction <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// return whether we need to yield at the end of ISR</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>high_task_awoken <span class="token operator">==</span> pdTRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定时器操作句柄</span>
<span class="token class-name">gptimer_handle_t</span> gptimer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">step_timer_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;Create timer handle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">gptimer_config_t</span> timer_config <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>clk_src <span class="token operator">=</span> GPTIMER_CLK_SRC_DEFAULT<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>direction <span class="token operator">=</span> GPTIMER_COUNT_UP<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>resolution_hz <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token comment">// 1MHz, 1 tick=1us</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_new_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer_config<span class="token punctuation">,</span> <span class="token operator">&amp;</span>gptimer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">gptimer_event_callbacks_t</span> cbs <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>on_alarm <span class="token operator">=</span> step_timer_inr<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_register_event_callbacks</span><span class="token punctuation">(</span>gptimer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cbs<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_enable</span><span class="token punctuation">(</span>gptimer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;Start timer, stop it at alarm event&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">gptimer_alarm_config_t</span> alarm_config1 <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>reload_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>alarm_count <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token comment">// period = 10ms</span>
        <span class="token punctuation">.</span>flags<span class="token punctuation">.</span>auto_reload_on_alarm <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_set_alarm_action</span><span class="token punctuation">(</span>gptimer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>alarm_config1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_start</span><span class="token punctuation">(</span>gptimer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置步进电机步数及方向</span>
<span class="token keyword">void</span> <span class="token function">step_set_steps</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> step<span class="token punctuation">,</span> <span class="token class-name">int8_t</span> dire<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 步数乘以相序节拍</span>
    target_step <span class="token operator">=</span> step <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
    direction <span class="token operator">=</span> dire<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置步进电机转速 （freq ms）</span>
<span class="token keyword">void</span> <span class="token function">step_update_freq</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> freq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;Stop timer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_stop</span><span class="token punctuation">(</span>gptimer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">ESP_LOGI</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">&quot;Start timer, update alarm value &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">gptimer_alarm_config_t</span> alarm_config <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>reload_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>alarm_count <span class="token operator">=</span> freq <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// period = freq ms</span>
        <span class="token punctuation">.</span>flags<span class="token punctuation">.</span>auto_reload_on_alarm <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_set_alarm_action</span><span class="token punctuation">(</span>gptimer<span class="token punctuation">,</span> <span class="token operator">&amp;</span>alarm_config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">gptimer_start</span><span class="token punctuation">(</span>gptimer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">app_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">motor_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Minimum free heap size: %ld bytes\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">esp_get_minimum_free_heap_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">step_timer_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">step_set_steps</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">step_update_freq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最终成果" tabindex="-1"><a class="header-anchor" href="#最终成果" aria-hidden="true">#</a> 最终成果</h2><figure><img src="`+l+'" alt="最终成果" tabindex="0" loading="lazy"><figcaption>最终成果</figcaption></figure>',32),r=[u];function k(d,m){return s(),a("div",null,r)}const _=n(i,[["render",k],["__file","motor.html.vue"]]);export{_ as default};
