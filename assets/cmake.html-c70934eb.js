import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as l,b as n,d as a,f as e,e as c}from"./app-0d33a0ff.js";const p="/blog/assets/imgcompile-394cf9b9.jpg",d="/blog/assets/img20230122221807-d1024524.jpg",r={},u=c('<h2 id="一、准备知识" tabindex="-1"><a class="header-anchor" href="#一、准备知识" aria-hidden="true">#</a> 一、准备知识</h2><h3 id="_1-1-c-的编译过程" tabindex="-1"><a class="header-anchor" href="#_1-1-c-的编译过程" aria-hidden="true">#</a> 1.1 C++的编译过程</h3><p>使用<code>g++</code>等编译工具，从源码生成最终的可执行文件一般有这几步：预处理（Preprocess）、编译（Compile）、汇编（assemble）、链接（link）。</p><figure><img src="'+p+`" alt="imgcompile.jpg" tabindex="0" loading="lazy"><figcaption>imgcompile.jpg</figcaption></figure><blockquote><p>输入<code>g++ --help</code>可以看到对应命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-E</span>                       Preprocess only<span class="token punctuation">;</span> <span class="token keyword">do</span> not compile, assemble or link.
<span class="token parameter variable">-S</span>                       Compile only<span class="token punctuation">;</span> <span class="token keyword">do</span> not assemble or link.
<span class="token parameter variable">-c</span>                       Compile and assemble, but <span class="token keyword">do</span> not link.
<span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                Place the output into <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>以下面程序为例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一步：预处理 C++中预处理指令以 <code>#</code> 开头。在预处理阶段，会对<code>#define</code>进行宏展开，处理<code>#if，#else</code>等条件编译指令，递归处理<code>#include</code>。这一步需要我们添加所有头文件的引用路径。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将xx.cpp源文件预处理成xx.i文件（文本文件）</span>
g++ <span class="token parameter variable">-E</span> main.cpp <span class="token parameter variable">-o</span> main.i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第二步：编译</p><p>检查代码的规范性和语法错误等，检查完毕后把代码翻译成汇编语言文件。</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将xx.i文件编译为xx.s的汇编文件（文本文件）</span>
g++ <span class="token parameter variable">-S</span> main.i <span class="token parameter variable">-o</span> main.s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三步：汇编 基于汇编语言文件生成二进制格式的目标文件。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将xx.s文件汇编成xx.o的二进制目标文件</span>
g++ <span class="token parameter variable">-c</span> main.s <span class="token parameter variable">-o</span> main.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第四步：链接</p><p>将目标代码与所依赖的库文件进行关联或者组装，合成一个可执行文件</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将xx.o二进制文件进行链接，最终生成可执行程序</span>
g++ main.o <span class="token parameter variable">-o</span> main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-静态链接库和动态链接库" tabindex="-1"><a class="header-anchor" href="#_1-2-静态链接库和动态链接库" aria-hidden="true">#</a> 1.2 静态链接库和动态链接库</h3><p>所谓静态和动态，其区别是链接的阶段不一样。</p><ul><li><p>静态链接库名称一般是<code>lib库名称.a</code>（<code>.a</code>代表<code>archive library</code>），其链接发生在编译环节。一个工程如果依赖一个静态链接库，其输出的库或可执行文件会将静态链接库<code>*.a</code>打包到该工程的输出文件中（可执行文件或库），因此生成的文件比较大，但在运行时也就不再需要库文件了。</p></li><li><p>而动态链接库的链接发生在程序的执行过程中，其在编译环节仅执行链接检查，而不进行真正的链接，这样可以节省系统的开销。动态库一般后缀名为<code>*.so</code>（<code>.so</code>代表<code>shared object</code>，Linux：<code>lib库名称.so</code> ，macOS：<code>lib库名称.dylib</code>）。动态链接库加载后，在内存中仅保存一份拷贝，多个程序依赖它时，不会重复加载和拷贝，这样也节省了内存的空间。</p></li><li><p>以下图为例</p><ul><li><p>工程<code>A</code>和<code>B</code>依赖静态链接库 <code>static library</code>，<code>A</code>和<code>B</code>在运行时，内存中会有多份<code>static library</code>；</p></li><li><p>工程<code>A</code>和<code>B</code>依赖动态链接库 <code>shared library</code>，<code>A</code>和<code>B</code>在运行时，内存中只有一份 <code>shared library</code>（shared：共享）。</p></li></ul></li></ul><figure><img src="`+d+`" alt="img20230122221807.jpg" tabindex="0" loading="lazy"><figcaption>img20230122221807.jpg</figcaption></figure><p>以上只是非常简单的一个解释以区分动态链接库和静态链接库。更多底层的知识需要单独进行深入讲解。</p><h3 id="_1-3-为什么需要cmake" tabindex="-1"><a class="header-anchor" href="#_1-3-为什么需要cmake" aria-hidden="true">#</a> 1.3 为什么需要CMake</h3><h4 id="_1-3-1-g-命令行编译" tabindex="-1"><a class="header-anchor" href="#_1-3-1-g-命令行编译" aria-hidden="true">#</a> 1.3.1 g++ 命令行编译</h4><p>当我们编译附件中<code>1.hello_world</code>时，我们可以运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>g++ main.cpp <span class="token parameter variable">-o</span> main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们需要引入外部库时，如附件中的<code>2.external_libs</code>，需要引入<code>gflags</code>（Google开源的命令行参数处理库），我们则需要运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装gflags</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgflags-dev libgflags2.2 

// -lgflags表示链接gflags库，-o main表示输出文件名为main
g++ main.cpp <span class="token parameter variable">-lgflags</span> <span class="token parameter variable">-o</span> main 

<span class="token comment"># 或者：</span>

<span class="token comment"># 安装pkg-config</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> pkg-config

// pkg-config是一个工具，用于查找和管理安装在系统上的库文件，--cflags <span class="token parameter variable">--libs</span> gflags表示查找gflags库的头文件和库文件的路径，-o main表示输出文件名为main

g++ main.cpp <span class="token variable"><span class="token variable">\`</span>pkg-config <span class="token parameter variable">--cflags</span> <span class="token parameter variable">--libs</span> gflags<span class="token variable">\`</span></span>  <span class="token parameter variable">-o</span> main 


<span class="token comment"># 测试输出</span>
./main <span class="token parameter variable">--age</span> <span class="token number">31</span> <span class="token parameter variable">--name</span> alice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有些时候有一些常用库我们也不用手动添加头文件或链接库路径，通常g++能在默认查询路径中找到他们。当我们的项目文件变得多起来，引入的外部库也多起来时，命令行编译这种方式就会变得十分臃肿，也不方便调试和编辑。通常在测试单个文件时会使用命令行进行编译，但不推荐在一个实际项目中使用命令行编译。</p><h4 id="_1-3-2-cmake简介" tabindex="-1"><a class="header-anchor" href="#_1-3-2-cmake简介" aria-hidden="true">#</a> 1.3.2 CMake简介</h4><p>在实际工作中推荐使用CMake构建C++项目，CMake是用于<strong>构建、测试</strong>和软件<strong>打包</strong>的开源<strong>跨平台</strong>工具；</p><p>特性：</p><ul><li>自动搜索可能需要的程序、库和头文件的能力；</li><li>独立的构建目录（如<code>build</code>），可以安全清理</li><li>支持复杂的自定义命令（下载、生成各种文件）</li><li>自定义配置可选组件</li><li>从简单的文本文件（<code>CMakeLists.txt</code>）自动生成工作区和项目的能力</li><li>在主流平台上自动生成文件依赖项并支持并行构建</li><li>几乎支持所有的IDE</li></ul><h2 id="二、cmake基础知识" tabindex="-1"><a class="header-anchor" href="#二、cmake基础知识" aria-hidden="true">#</a> 二、CMake基础知识</h2><h3 id="_2-1-安装" tabindex="-1"><a class="header-anchor" href="#_2-1-安装" aria-hidden="true">#</a> 2.1 安装</h3><p>ubuntu上请执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> cmake <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者编译安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 以v3.25.1版本为例</span>
<span class="token function">git</span> clone <span class="token parameter variable">-b</span> v3.25.1 https://github.com/Kitware/CMake.git 
<span class="token builtin class-name">cd</span> CMake
<span class="token comment"># 你使用\`--prefix\`来指定安装路径，或者去掉\`--prefix\`,安装在默认路径。</span>
./bootstrap <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token operator">&lt;</span>安装路径<span class="token operator">&gt;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>

<span class="token comment"># 验证</span>
cmake <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-第一个cmake例子" tabindex="-1"><a class="header-anchor" href="#_2-2-第一个cmake例子" aria-hidden="true">#</a> 2.2 第一个CMake例子</h3><p>附件位置：<code>3.first_cmake</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 第一步：配置，-S 指定源码目录，-B 指定构建目录</span>
cmake <span class="token parameter variable">-S</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-B</span> build 
<span class="token comment"># 第二步：生成，--build 指定构建目录</span>
cmake <span class="token parameter variable">--build</span> build
<span class="token comment"># 运行</span>
./build/first_cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vs code插件：</p><ul><li>安装<code>twxs.cmake</code>做代码提示；</li><li>安装<code>ms-vscode.cmake-tools</code>界面操作。</li></ul><h3 id="_2-3-语法基础" tabindex="-1"><a class="header-anchor" href="#_2-3-语法基础" aria-hidden="true">#</a> 2.3 语法基础</h3><h4 id="_2-3-1-指定版本" tabindex="-1"><a class="header-anchor" href="#_2-3-1-指定版本" aria-hidden="true">#</a> 2.3.1 指定版本</h4><p>以附件：<code>3.first_cmake/CMakeLists.txt</code>为例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># CMake 最低版本号要求</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>

<span class="token comment"># first_cmake是项目名称，VERSION是版本号，DESCRIPTION是项目描述，LANGUAGES是项目语言</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>first_cmake 
        <span class="token property">VERSION</span> <span class="token number">1.0.0</span> 
        DESCRIPTION <span class="token string">&quot;项目描述&quot;</span>
        LANGUAGES CXX<span class="token punctuation">)</span> 

<span class="token comment"># 添加一个可执行程序，first_cmake是可执行程序名称，main.cpp是源文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>first_cmake main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),m={href:"https://cmake.org/cmake/help/latest/command/cmake_minimum_required.html?highlight=cmake_minimum_required",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"cmake_minimum_required",-1),k=n("code",null,"VERSION",-1),b=n("code",null,"cmake_minimum_required",-1),_=c(`<h4 id="_2-3-2-设置项目" tabindex="-1"><a class="header-anchor" href="#_2-3-2-设置项目" aria-hidden="true">#</a> 2.3.2 设置项目</h4><p>以附件：<code>3.first_cmake/CMakeLists.txt</code>为例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">project</span><span class="token punctuation">(</span>ProjectName 
        <span class="token property">VERSION</span> <span class="token number">1.0.0</span> 
        DESCRIPTION <span class="token string">&quot;项目描述&quot;</span>
        LANGUAGES CXX<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g=n("code",null,"CMakeLists.txt",-1),h={href:"https://cmake.org/cmake/help/latest/command/project.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"project",-1),C=n("code",null,"project",-1),x=n("code",null,"ProjectName",-1),E=n("code",null,"first_cmake",-1),A=c(`<h4 id="_2-3-3-添加可执行文件目标" tabindex="-1"><a class="header-anchor" href="#_2-3-3-添加可执行文件目标" aria-hidden="true">#</a> 2.3.3 添加可执行文件目标</h4><p>以附件：<code>3.first_cmake/CMakeLists.txt</code>为例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_executable</span><span class="token punctuation">(</span>first_cmake main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),I={href:"https://cmake.org/cmake/help/latest/command/add_executable.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"add_executable",-1),T=n("code",null,"Target",-1),L=n("code",null,"Target",-1),N=n("code",null,"Target",-1),R=c(`<h4 id="_2-3-4-生成静态库并链接" tabindex="-1"><a class="header-anchor" href="#_2-3-4-生成静态库并链接" aria-hidden="true">#</a> 2.3.4 生成静态库并链接</h4><p>附件位置：<code>4.static_lib_test</code></p><blockquote><p><strong>A.生成静态库</strong></p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment">#account_dir/CMakeLists.txt</span>

<span class="token comment"># 最低版本要求</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>Account<span class="token punctuation">)</span>

<span class="token comment"># 添加静态库，Linux下会生成libAccount.a</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>Account <span class="token namespace">STATIC</span> Account.cpp Account.h<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编译静态库后，会在build下生成 build/libAccount.a 静态库文件</span>
account_dir/
├── Account.cpp
├── Account.h
├── build
│   └── libAccount.a
└── CMakeLists.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),S={href:"https://cmake.org/cmake/help/latest/command/add_library.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"add_library",-1),B=n("code",null,"add_executable",-1),q=n("code",null,"Account",-1),M=n("code",null,"lib库名称.a",-1),O=n("code",null,"SHARED",-1),P=n("code",null,"STATIC",-1),D=c(`<blockquote><p><strong>B.链接</strong></p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># test_account/CMakeLists.txt</span>

<span class="token comment"># 最低版本要求</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>

<span class="token comment"># 项目名称</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>test_account<span class="token punctuation">)</span>

<span class="token comment"># 添加执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>test_account test_account.cpp<span class="token punctuation">)</span>

<span class="token comment"># 添加头文件目录，如果不添加，找不到头文件</span>
<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>test_account <span class="token namespace">PUBLIC</span> <span class="token string">&quot;../account_dir&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 添加库文件目录，如果不添加，找不到库文件</span>
<span class="token keyword">target_link_directories</span><span class="token punctuation">(</span>test_account <span class="token namespace">PUBLIC</span> <span class="token string">&quot;../account_dir/build&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 添加目标链接库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>test_account <span class="token namespace">PRIVATE</span> Account<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编译后目录如下</span>
<span class="token number">4</span>.static_lib_test/
├── account_dir
│   ├── Account.cpp
│   ├── Account.h
│   ├── build
│   │   └── libAccount.a
│   └── CMakeLists.txt
└── test_account 
    ├── build
    │   └── test_account
    ├── CMakeLists.txt
    └── test_account.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过<code>add_library</code>和<code>add_executable</code>定义了<code>Target</code>，我们可以通过<code>Target</code>的名称为其添加属性，例如：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 指定目标包含的头文件目录</span>
<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>test_account <span class="token namespace">PUBLIC</span> <span class="token string">&quot;../account_dir&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 添加库文件目录，如果不添加，找不到库文件</span>
<span class="token keyword">target_link_directories</span><span class="token punctuation">(</span>test_account <span class="token namespace">PUBLIC</span> <span class="token string">&quot;../account_dir/build&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 指定目标链接的库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>test_account <span class="token namespace">PRIVATE</span> Account<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),U={href:"https://cmake.org/cmake/help/latest/command/target_include_directories.html",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"target_include_directories",-1),$=n("code",null,"test_account",-1),F=n("code",null,'"../account_dir"',-1),j=n("code",null,"PUBLIC",-1),X=n("code",null,"PRIVATE",-1),G={href:"https://cmake.org/cmake/help/latest/command/target_link_libraries.html",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"target_link_libraries",-1),H=n("code",null,"libAccount.a",-1),Q=n("code",null,"test_account",-1),z={href:"https://cmake.org/cmake/help/latest/command/target_link_directories.html",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"target_link_directories",-1),W=c(`<h4 id="_2-3-5-生成动态库并连接" tabindex="-1"><a class="header-anchor" href="#_2-3-5-生成动态库并连接" aria-hidden="true">#</a> 2.3.5 生成动态库并连接</h4><p>附件位置：<code>5.dynamic_lib_test</code></p><blockquote><p><strong>A.生成动态库</strong></p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment">#account_dir/CMakeLists.txt</span>

<span class="token comment"># 添加动态库，Linux下会生成libAccount.so</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>Account <span class="token namespace">SHARED</span> Account.cpp Account.h<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编译动态库后，会在build下生成 build/libAccount.so 动态库文件</span>
account_dir/
├── Account.cpp
├── Account.h
├── build
│   └── libAccount.so
└── CMakeLists.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>B.链接</strong></p></blockquote><p>操作不变。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ldd查看依赖的动态库</span>
ldd ./build/test_account
libAccount.so <span class="token operator">=</span><span class="token operator">&gt;</span> /home/enpei/Documents/course_cpp_tensorrt/course_5/src/5.dynamic_lib_test/test_account/<span class="token punctuation">..</span>/account_dir/build/libAccount.so <span class="token punctuation">(</span>0x00007fb692cf1000<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以用一个<code>CMakeLists.txt</code>来一次性编译，参考附件<code>6.build_together</code></p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment">#6.build_together/CMakeLists.txt\`</span>

<span class="token comment"># 最低版本要求</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>test_account<span class="token punctuation">)</span>

<span class="token comment"># 添加动态库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>Account <span class="token namespace">SHARED</span> <span class="token string">&quot;./account_dir/Account.cpp&quot;</span> <span class="token string">&quot;./account_dir/Account.h&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 添加可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>test_account <span class="token string">&quot;./test_account/test_account.cpp&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 添加头文件</span>
<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>test_account <span class="token namespace">PUBLIC</span> <span class="token string">&quot;./account_dir&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 添加链接库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>test_account Account<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-6-cmake-中的-public、private、interface" tabindex="-1"><a class="header-anchor" href="#_2-3-6-cmake-中的-public、private、interface" aria-hidden="true">#</a> 2.3.6 CMake 中的 PUBLIC、PRIVATE、INTERFACE</h4><p>CMake中经常使用<code>target_...()</code>类似的命令，一般这样的命令支持通过<code>PUBLIC</code>、<code>PRIVATE</code>、<code>INTERFACE</code>关键字来控制传播。</p><p>以<code>target_link_libraries(A B)</code>为例，从理解的角度来看</p><ul><li><code>PRIVATE</code> ：依赖项<code>B</code>仅链接到目标<code>A</code>，如果有<code>C</code> 链接了<code>A</code>，<code>C</code>不会链接<code>B</code></li><li><code>INTERFACE</code> ：依赖项<code>B</code>并不链接到目标<code>A</code>，如果有<code>C</code> 链接了<code>A</code>，<code>C</code>会链接<code>B</code></li><li><code>PUBLIC</code> ：依赖项<code>B</code>链接到目标<code>A</code>，如果有<code>C</code> 链接了<code>A</code>，<code>C</code>也会链接<code>B</code></li></ul><p>其实就是对象属性的传递，打个散烟的比方：</p><ul><li><code>PRIVATE</code>： 就是自己抽，不给别人抽</li><li><code>INTERFACE</code> ：就是自己不抽，给别人抽</li><li><code>PUBLIC</code> ：就是自己抽，也给别人抽</li></ul><p>从使用的角度来说，如果有<code>C</code>链接了目标<code>A</code></p><ul><li>如果<code>B</code>仅用于<code>A</code>的实现，且不在头文件中提供给<code>C</code>使用，使用<code>PRIVATE</code></li><li>如果<code>B</code>不用于<code>A</code>的实现，仅在头文件中作为借口给<code>C</code>使用，使用<code>INTERFACE</code></li><li>如果<code>B</code>既用于<code>A</code>的实现，也在头文件中提供给<code>C</code>使用，使用<code>PUBLIC</code></li></ul><p>举例：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 创建库</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>C c.cpp<span class="token punctuation">)</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>D d.cpp<span class="token punctuation">)</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>B b.cpp<span class="token punctuation">)</span>

<span class="token comment"># C是B的PUBLIC依赖项</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>B <span class="token namespace">PUBLIC</span> C<span class="token punctuation">)</span>
<span class="token comment"># D是B的PRIVATE依赖项</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>B <span class="token namespace">PRIVATE</span> D<span class="token punctuation">)</span>

<span class="token comment"># 添加可执行文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>A a.cpp<span class="token punctuation">)</span>

<span class="token comment"># 将B链接到A</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>A B<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因为<code>C</code>是<code>B</code>的<code>PUBLIC</code>依赖项，所以<code>C</code>会传播到<code>A</code></li><li>因为<code>D</code>是<code>B</code>的<code>PRIVATE</code>依赖性，所以<code>D</code>不会传播到<code>A</code></li></ul><h4 id="_2-3-7-变量" tabindex="-1"><a class="header-anchor" href="#_2-3-7-变量" aria-hidden="true">#</a> 2.3.7 变量</h4><p>附件位置：<code>7.message_var_demo</code></p><p>像其他编程语言一样，我们应该将CMake理解为一门编程语言。我们也需要设定变量来储存我们的选项，信息。有时候我们通过变量来判断我们在什么平台上，通过变量来判断我们需要编译哪些<code>Target</code>，也通过变量来决定添加哪些依赖。</p><h4 id="_2-3-8-include引入其他代码" tabindex="-1"><a class="header-anchor" href="#_2-3-8-include引入其他代码" aria-hidden="true">#</a> 2.3.8 include引入其他代码</h4><p>附件位置：<code>8.include_demo</code></p><h4 id="_2-3-9-条件控制" tabindex="-1"><a class="header-anchor" href="#_2-3-9-条件控制" aria-hidden="true">#</a> 2.3.9 条件控制</h4><p>附件位置：<code>9.if_demo</code></p><p>正如前面所讲，应该把CMake当成编程语言，除了可以设置变量以外，CMake还可以写条件控制。</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">if</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>
    <span class="token comment"># 为true的常量：ON、YES、TRUE、Y、1、非0数字</span>
<span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 为false的常量：OFF、NO、FALSE、N、0、空字符串、NOTFOUND</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以和条件一起使用的关键词有</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token operator">NOT</span>, TARGET, <span class="token function">EXISTS</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span>, <span class="token operator">DEFINED</span>等
<span class="token operator">STREQUAL</span>, <span class="token operator">AND</span>, <span class="token operator">OR</span>, <span class="token operator">MATCHES</span> <span class="token punctuation">(</span>regular expression<span class="token punctuation">)</span>, <span class="token operator">VERSION_LESS</span>, VERSION_LESS_EQUAL等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-10-cmake分步编译" tabindex="-1"><a class="header-anchor" href="#_2-3-10-cmake分步编译" aria-hidden="true">#</a> 2.3.10 CMake分步编译</h4><p>附件位置：<code>10.steps_demo</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看所有目标</span>
$ cmake <span class="token parameter variable">-S</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-B</span> build
$ <span class="token builtin class-name">cd</span> build
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--target</span> <span class="token builtin class-name">help</span>

The following are some of the valid targets <span class="token keyword">for</span> this Makefile:
<span class="token punctuation">..</span>. all <span class="token punctuation">(</span>the default <span class="token keyword">if</span> no target is provided<span class="token punctuation">)</span>
<span class="token punctuation">..</span>. clean
<span class="token punctuation">..</span>. depend
<span class="token punctuation">..</span>. rebuild_cache
<span class="token punctuation">..</span>. edit_cache
<span class="token punctuation">..</span>. steps_demo
<span class="token punctuation">..</span>. main.o
<span class="token punctuation">..</span>. main.i
<span class="token punctuation">..</span>. main.s



<span class="token comment"># 1.预处理</span>
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--target</span> main.i
<span class="token comment"># 输出：Preprocessing CXX source to CMakeFiles/steps_demo.dir/main.cpp.i</span>
<span class="token comment"># 可以打开滑到底部</span>

<span class="token comment"># 2.编译</span>
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--target</span> main.s
<span class="token comment"># 输出汇编代码：Compiling CXX source to assembly CMakeFiles/steps_demo.dir/main.cpp.s</span>

<span class="token comment"># 3.汇编</span>
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--target</span> main.o
<span class="token comment"># 输出二进制文件：Building CXX object CMakeFiles/steps_demo.dir/main.cpp.o</span>

<span class="token comment"># 链接</span>
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span>
Scanning dependencies of target steps_demo
<span class="token punctuation">[</span> <span class="token number">50</span>%<span class="token punctuation">]</span> Linking CXX executable steps_demo
<span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target steps_demo

<span class="token comment"># 运行</span>
./steps_demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-11-生成器表达式" tabindex="-1"><a class="header-anchor" href="#_2-3-11-生成器表达式" aria-hidden="true">#</a> 2.3.11 生成器表达式</h4><p>附件位置：<code>11.generator_expression</code></p><p>生成器表达式简单来说就是在CMake生成构建系统的时候根据不同配置动态生成特定的内容。有时用它可以让代码更加精简，我们介绍几种常用的。</p><blockquote><p>需要注意的是，生成表达式被展开是在生成构建系统的时候，所以不能通过解析配置<code>CMakeLists.txt</code>阶段的<code>message</code>命令打印，可以用类似<code>file(GENERATE OUTPUT &quot;./generator_test.txt&quot; CONTENT &quot;$&lt;$&lt;BOOL:TRUE&gt;:TEST&gt;&quot;)</code>生成文件的方式间接测试。</p></blockquote><p>在其最一般的形式中，生成器表达式是<code>$&lt;...&gt;</code>，尖括号中间可以是如下几种类型：</p><ul><li>条件表达式</li><li>变量查询（Variable-Query）</li><li>目标查询（Target-Query）</li><li>输出相关的表达式</li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 1.条件表达式：$&lt;condition:true_string&gt;，当condition为真时，返回true_string，否则返回空字符串</span>
<span class="token punctuation">$&lt;</span><span class="token number">0</span>:TEST<span class="token punctuation">&gt;</span>  
<span class="token punctuation">$&lt;</span><span class="token number">1</span>:TEST<span class="token punctuation">&gt;</span>  
<span class="token punctuation">$&lt;</span><span class="token punctuation">$&lt;</span>BOOL:<span class="token boolean">TRUE</span><span class="token punctuation">&gt;</span>:TEST<span class="token punctuation">&gt;</span>

<span class="token comment"># 2.变量查询（Variable-Query）</span>
<span class="token punctuation">$&lt;</span>TARGET_EXISTS:target<span class="token punctuation">&gt;</span>：判断目标是否存在
<span class="token punctuation">$&lt;</span>CONFIG:Debug<span class="token punctuation">&gt;</span>：判断当前构建类型是否为Debug

<span class="token comment"># 3.目标查询（Target-Query）</span>
<span class="token punctuation">$&lt;</span>TARGET_FILE:target<span class="token punctuation">&gt;</span>：获取编译目标的文件路径
<span class="token punctuation">$&lt;</span>TARGET_FILE_NAME:target<span class="token punctuation">&gt;</span>：获取编译目标的文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.输出相关表达式：用于在不同的环节使用不同参数，比如需要在<code>install</code>和<code>build</code>环节分别用不同的参数，我们可以这样写：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_library</span><span class="token punctuation">(</span>Foo ...<span class="token punctuation">)</span>
<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>Foo
    <span class="token namespace">PUBLIC</span>
        <span class="token punctuation">$&lt;</span>BUILD_INTERFACE:<span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span><span class="token punctuation">&gt;</span>
        <span class="token punctuation">$&lt;</span>INSTALL_INTERFACE:<span class="token punctuation">\${</span><span class="token variable">CMAKE_INSTALL_INCLUDEDIR</span><span class="token punctuation">}</span><span class="token punctuation">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>$&lt;BUILD_INTERFACE:\${CMAKE_CURRENT_SOURCE_DIR}&gt;</code>仅在<code>build</code>环节生效;而<code>$&lt;INSTALL_INTERFACE:\${CMAKE_INSTALL_INCLUDEDIR}&gt;</code>仅在<code>install</code>环节生效。通过设定不同阶段不同的参数，我们可以避免路径混乱的问题。</p><h4 id="_2-3-12-函数和宏" tabindex="-1"><a class="header-anchor" href="#_2-3-12-函数和宏" aria-hidden="true">#</a> 2.3.12 函数和宏</h4><p>附件位置：<code>12.function_macro</code></p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 定义一个宏，宏名为my_macro，没有参数</span>
<span class="token keyword">macro</span><span class="token punctuation">(</span>my_macro<span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;宏内部的信息&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">set</span><span class="token punctuation">(</span>macro_var <span class="token string">&quot;宏内部变量test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">endmacro</span><span class="token punctuation">(</span>my_macro<span class="token punctuation">)</span>

<span class="token comment"># 定义一个函数，函数名为second_func，有两个参数</span>
<span class="token keyword">function</span><span class="token punctuation">(</span>second_func arg1 arg2<span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;第一个参数：<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">arg1</span><span class="token punctuation">}</span></span>, 第二个参数：<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">arg2</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">endfunction</span><span class="token punctuation">(</span>second_func<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-13-设置安装" tabindex="-1"><a class="header-anchor" href="#_2-3-13-设置安装" aria-hidden="true">#</a> 2.3.13 设置安装</h4><p>附件位置：<code>13.install_demo</code></p><p>当需要发布项目时你需要指定项目文件的安装路径。下面的代码片段中，使用<code>install</code>安装<code>demo_test</code>，并分别将可执行文件安装在<code>bin</code>中，动态链接库和静态链接库都安装在<code>lib</code>，公共头文件安装在<code>include</code>。这里的路径都将添加<code>\${CMAKE_INSTALL_PREFIX}</code>作为前缀（如果不设置<code>CMAKE_INSTALL_PREFIX</code>，则会安装到<code>/usr/local</code> 目录下）。实现安装的功能在你需要发布你项目给其他人使用时，非常有用。</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 设置安装</span>
<span class="token keyword">install</span><span class="token punctuation">(</span>TARGETS demo_test
        RUNTIME DESTINATION bin <span class="token comment"># 可执行文件</span>
        LIBRARY DESTINATION lib <span class="token comment"># 动态库</span>
        ARCHIVE DESTINATION lib <span class="token comment"># 静态库</span>
        <span class="token property">PUBLIC_HEADER</span> DESTINATION include <span class="token comment"># 公共头文件</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-14-寻找依赖-find-package" tabindex="-1"><a class="header-anchor" href="#_2-3-14-寻找依赖-find-package" aria-hidden="true">#</a> 2.3.14 寻找依赖 find_package</h4><p>对于大部分支持了CMake的项目来说，均可以通过<code>find_package</code>找到对应的依赖库，参考附件：<code>14.find_demo</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用find_package寻找&lt;LibaryName&gt;库，如果找到，一般都会有以下变量（库作者设置）</span>
<span class="token operator">&lt;</span>LibaryName<span class="token operator">&gt;</span>_FOUND：表示是否找到
<span class="token operator">&lt;</span>LibaryName<span class="token operator">&gt;</span>_INCLUDE_DIR：表示头文件目录
<span class="token operator">&lt;</span>LibaryName<span class="token operator">&gt;</span>_LIBRARIES：表示库文件目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们编写了一个新的函数库，我们希望别的项目可以通过<code>find_package</code>对它进行引用，我们有两种办法：</p><ul><li>编写一个<code>Find&lt;LibraryName&gt;.cmake</code>，适用于导入非cmake安装的项目，参考附件：<code>15.custom_find</code></li><li>使用<code>install</code>安装，生成<code>&lt;LibraryName&gt;Config.cmake</code>文件，适用于导入自己开发的cmake项目，参考附件：<code>16.custom_install_demo</code></li></ul><h2 id="三、opencv-cmake示例" tabindex="-1"><a class="header-anchor" href="#三、opencv-cmake示例" aria-hidden="true">#</a> 三、opencv CMake示例</h2><p>附件位置：<code>17.demo_opencv/</code></p><p>安装OpenCV：<code>sudo apt install libopencv-dev</code></p><p>依赖和链接OpenCV与常规的添加依赖并没有太多不同，同时OpenCV提供了<code>cmake find package</code>的功能，因此我们可以通过<code>find_package</code>方便的定位opencv在系统中的位置和需要添加的依赖。</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span>

<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;OPENCV INCLUDE DIRS: <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">OpenCV_INCLUDE_DIRS</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;OPENCV LINK LIBRARIES: <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">OpenCV_LIBS</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果cmake找到了OpenCV，配置cmake后，命令行会有如下输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>OPENCV INCLUDE DIRS: /usr/include/opencv4
OPENCV LINK LIBRARIES: opencv_calib3d<span class="token punctuation">;</span>opencv_core<span class="token punctuation">;</span>opencv_dnn<span class="token punctuation">;</span>opencv_features2d<span class="token punctuation">;</span>opencv_flann<span class="token punctuation">;</span>opencv_highgui<span class="token punctuation">;</span>opencv_imgcodecs<span class="token punctuation">;</span>opencv_imgproc<span class="token punctuation">;</span>opencv_ml<span class="token punctuation">;</span>opencv_objdetect<span class="token punctuation">;</span>opencv_photo<span class="token punctuation">;</span>opencv_stitching<span class="token punctuation">;</span>opencv_video<span class="token punctuation">;</span>opencv_videoio<span class="token punctuation">;</span>opencv_aruco<span class="token punctuation">;</span>opencv_bgsegm<span class="token punctuation">;</span>opencv_bioinspired<span class="token punctuation">;</span>opencv_ccalib<span class="token punctuation">;</span>opencv_datasets<span class="token punctuation">;</span>opencv_dnn_objdetect<span class="token punctuation">;</span>opencv_dnn_superres<span class="token punctuation">;</span>opencv_dpm<span class="token punctuation">;</span>opencv_face<span class="token punctuation">;</span>opencv_freetype<span class="token punctuation">;</span>opencv_fuzzy<span class="token punctuation">;</span>opencv_hdf<span class="token punctuation">;</span>opencv_hfs<span class="token punctuation">;</span>opencv_img_hash<span class="token punctuation">;</span>opencv_line_descriptor<span class="token punctuation">;</span>opencv_optflow<span class="token punctuation">;</span>opencv_phase_unwrapping<span class="token punctuation">;</span>opencv_plot<span class="token punctuation">;</span>opencv_quality<span class="token punctuation">;</span>opencv_reg<span class="token punctuation">;</span>opencv_rgbd<span class="token punctuation">;</span>opencv_saliency<span class="token punctuation">;</span>opencv_shape<span class="token punctuation">;</span>opencv_stereo<span class="token punctuation">;</span>opencv_structured_light<span class="token punctuation">;</span>opencv_superres<span class="token punctuation">;</span>opencv_surface_matching<span class="token punctuation">;</span>opencv_text<span class="token punctuation">;</span>opencv_tracking<span class="token punctuation">;</span>opencv_videostab<span class="token punctuation">;</span>opencv_viz<span class="token punctuation">;</span>opencv_ximgproc<span class="token punctuation">;</span>opencv_xobjdetect<span class="token punctuation">;</span>opencv_xphoto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,64);function J(Z,nn){const s=t("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[a("命令"),n("a",m,[v,e(s)]),a("来指定当前工程所使用的CMake版本，不区分大小写的，通常用小写。"),k,a("是这个函数的一个特殊关键字，版本的值在关键字之后。CMake中的命令大多和"),b,a("相似，不区分大小写，并有很多关键字来引导命令的参数输入（类似函数传参）。")]),_,n("p",null,[a("在"),g,a("的开头，都会使用"),n("a",h,[f,e(s)]),a("来指定本项目的名称、版本、介绍、与使用的语言。在"),C,a("中，第一个"),x,a("（例子中用的是"),E,a("）不需要参数，其他关键字都有参数。")]),A,n("p",null,[a("这里我们用到"),n("a",I,[y,e(s)]),a("，其中第一个参数是最终生成的可执行文件名以及在CMake中定义的"),T,a("名。我们可以在CMake中继续使用"),L,a("的名字为"),N,a("的编译设置新的属性和行为。命令中第一个参数后面的参数都是编译目标所使用到的源文件。")]),R,n("p",null,[a("这里我们用到"),n("a",S,[w,e(s)]),a(", 和"),B,a("一样，"),q,a("为最终生成的库文件名（"),M,a("），第二个参数是用于指定链接库为动态链接库（"),O,a("）还是静态链接库（"),P,a("），后面的参数是需要用到的源文件。")]),D,n("ul",null,[n("li",null,[a("通过"),n("a",U,[V,e(s)]),a("，我们给"),$,a("添加了头文件引用路径"),F,a("。上面的关键词"),j,a(","),X,a("用于说明目标属性的作用范围，更多介绍参考下节。")]),n("li",null,[a("通过"),n("a",G,[K,e(s)]),a("，将前面生成的静态库"),H,a("链接给对象"),Q,a("，但此时还没指定库文件的目录，CMake无法定位库文件")]),n("li",null,[a("再通过"),n("a",z,[Y,e(s)]),a("，添加库文件的目录即可。")])]),W])}const en=i(r,[["render",J],["__file","cmake.html.vue"]]);export{en as default};
