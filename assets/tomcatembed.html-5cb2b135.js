import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-efeaa514.js";const e={},p=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>众所周知<code>springboot</code>通过<code>Fatjar</code>运行时内嵌了<code>tomcat</code>，那么<code>tomcat</code>是如何启动的，又是如何调整<code>tomcat</code>启动参数的，我们来一探究竟。</p><ul><li>内置Tomcat长什么样，它与原来的Tomcat有啥区别</li><li>Springboot是如何使用的内置tomcat</li><li><code>DispatcherServlet</code>是如何加载到tomcat容器的</li></ul><h2 id="一、原来的tomcat启动流程" tabindex="-1"><a class="header-anchor" href="#一、原来的tomcat启动流程" aria-hidden="true">#</a> 一、原来的Tomcat启动流程</h2><blockquote><p>1.运行<code>catalina.sh</code> <code>start</code>脚本最终会执行<code>Bootstrap</code>的<code>mian</code>方法</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">eval</span> <span class="token builtin class-name">exec</span> <span class="token string">&quot;<span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">$_RUNJDB</span><span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">$CATALINA_LOGGING_CONFIG</span><span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token variable">$LOGGING_MANAGER</span> <span class="token string">&quot;<span class="token variable">$JAVA_OPTS</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$CATALINA_OPTS</span>&quot;</span> <span class="token punctuation">\\</span>
        -D<span class="token variable">$ENDORSED_PROP</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$JAVA_ENDORSED_DIRS</span>&quot;</span> <span class="token punctuation">\\</span>
        <span class="token parameter variable">-classpath</span> <span class="token string">&quot;<span class="token variable">$CLASSPATH</span>&quot;</span> <span class="token punctuation">\\</span>
        <span class="token parameter variable">-sourcepath</span> <span class="token string">&quot;<span class="token variable">$CATALINA_HOME</span>&quot;</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/java <span class="token punctuation">\\</span>
        <span class="token parameter variable">-Dcatalina.base</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$CATALINA_BASE</span>&quot;</span> <span class="token punctuation">\\</span>
        <span class="token parameter variable">-Dcatalina.home</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$CATALINA_HOME</span>&quot;</span> <span class="token punctuation">\\</span>
        <span class="token parameter variable">-Djava.io.tmpdir</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$CATALINA_TMPDIR</span>&quot;</span> <span class="token punctuation">\\</span>
        //这里会运行Bootstrap的main方法 并传入start参数
        org.apache.catalina.startup.Bootstrap <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span> start
    <span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>2.执行Bootstrap的mian方法 构建Catalina对象 并执行其load和start方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//全局变量 用于保存Bootstrap实例</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Bootstrap</span> daemon <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">//全局变量 用于保存Catalina对象</span>
<span class="token keyword">private</span> <span class="token class-name">Object</span> catalinaDaemon <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>daemonLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>daemon <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Don&#39;t set daemon until init() has completed</span>
                <span class="token class-name">Bootstrap</span> bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//这里 构建Catalina对象并赋值给全局变量catalinaDaemon</span>
                    bootstrap<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//这里初始化了全局变量</span>
                daemon <span class="token operator">=</span> bootstrap<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
               <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    daemon<span class="token punctuation">.</span><span class="token function">setAwait</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//本质是调用了Catalina对象的load方法</span>
                    daemon<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//本质上是调用了Catalina的start方法</span>
                    daemon<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token punctuation">}</span> 
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
 <span class="token comment">//构建Catalina对象并赋值给全局变量catalinaDaemon</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//通过反射构建Catalina对象</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> startupClass <span class="token operator">=</span> catalinaLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.catalina.startup.Catalina&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> startupInstance <span class="token operator">=</span> startupClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//这里把Catalina对象赋予了全局变量catalinaDaemon</span>
    catalinaDaemon <span class="token operator">=</span> startupInstance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//本质是调用了Catalina对象的load方法</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// Call the load() method</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token string">&quot;load&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span>
            catalinaDaemon<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里就是调用了Catalina对象的load方法</span>
        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>catalinaDaemon<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//本质上是调用了Catalina的start方法</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
      <span class="token class-name">Method</span> method <span class="token operator">=</span> catalinaDaemon<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>catalinaDaemon<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3.Catalina的load方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//全局变量Server对象 该对象通过解析server.xml生成</span>
<span class="token keyword">protected</span> <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// Parse main server.xml</span>
    <span class="token comment">// 解析server.xml文件 初始化server对象</span>
    <span class="token function">parseServerXml</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Server</span> s <span class="token operator">=</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// Start the new server</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>server.xml的结构是一个4层嵌套的树状结构。一层也就是根节点是server元素，二层是service元素，三层是Engine元素，四层是Host元素。最终其被解析Server对象。该对象内部包含一组service对象，每个service对象包含一个Engine对象，每个Engine对象包含一组Host对象。</p><p>其实每个Host对象还对应一组Context对象也就是我们常说的Servlet容器，只是在server.xml文件中体现的比较隐晦。Host对象有一个属性叫做appBase，该属性的默认值是webapps，最终解析时会去Tomcat根目录下的webapps文件中找web.xml，找到一个就生成一个Context对象。</p><blockquote><p>4.Catalina的start方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//本质上就是调用server的start方法</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// Start the new server</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LifecycleException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token comment">//返回全局变量server</span>
<span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> server<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里蕴含这一个设计模式值得一提,通过load方法可以知道Server内部有一组service，每个service内部有一个Engine，每个Engine内部有一组host，每个host内部有一组context。这里提到的每一个对象都有init方法和start方法，在server的start方法被调用后需要执行其下每个service对象的init方法和start方法，当service的start方法被调用后需要执行其下Engine的init方法和start方法以此类推一直到调用完Context的init方法和start方法。Tomcat使用抽象模板的设计模式完成了该流程的实现。 首先看看抽象模板类LifecycleBase，上述提到的所有对象都继承该类，该类有4个主要方法，其中start是模板类的核心方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LifecycleBase</span> <span class="token keyword">implements</span> <span class="token class-name">Lifecycle</span> <span class="token punctuation">{</span>
    <span class="token comment">//抽象模板类提供的公共方法</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">NEW</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">invalidTransition</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">BEFORE_INIT_EVENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">setStateInternal</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">INITIALIZING</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//该方法是一个抽象方法由子类完成实现</span>
            <span class="token comment">//server类的实现方式  就是便利其内部的sercie对象 挨个调用其init方法</span>
            <span class="token comment">//service类的实现方法 就是调用engine的 init方法</span>
            <span class="token comment">//engine的实现方法 就是便利其内部的host对象 挨个调用其init方法</span>
            <span class="token comment">//以此类推。。。</span>
            <span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//这里会发生状态变更 防止重复init用的</span>
            <span class="token function">setStateInternal</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">INITIALIZED</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">handleSubClassException</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">&quot;lifecycleBase.initFail&quot;</span><span class="token punctuation">,</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//抽象模板类提供的公共方法</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">NEW</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//start方法中会先执行init方法</span>
            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">INITIALIZED</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">STOPPED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">setStateInternal</span><span class="token punctuation">(</span><span class="token class-name">LifecycleState</span><span class="token punctuation">.</span><span class="token constant">STARTING_PREP</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//该方法是一个抽象方法由子类完成实现</span>
            <span class="token comment">//server类的实现方式 就是便利其内部的sercie对象 挨个调用其start方法</span>
            <span class="token comment">//service类的实现方法 就是调用engine的 start方法</span>
            <span class="token comment">//engine的实现方法 就是便利其内部的host对象 挨个调用其start方法</span>
            <span class="token comment">//以此类推。。。</span>
            <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//子类实现</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">initInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">;</span>
    <span class="token comment">//子类实现</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于对LifecycleBase的4个方法的分析，我们看看当server的start方法被调用时会发生什么</p><ol><li>server的start方法会调用其父类LifecycleBase的公共start方法</li><li>接着会调用LifecycleBase的init方法</li><li>接着会调用LifecycleBase的initInternal方法，该方法由子类server实现，便利其下的service对象挨个调用init方法</li><li>service对象的init方法是由父类LifecycleBase实现的，所以会执行LifecycleBase的init方法。这里有一个状态变更即元素的state状态由LifecycleState.NEW变成了LifecycleState.INITIALIZING防止在start方法中再次执行init方法</li><li>以此类推最终所有元素的init方法会被调用并且状态变成了LifecycleState.INITIALIZING，最终又回到了server的start方法此时init方法已经执行完了</li><li>继续向下走执行startInternal方法，该方法由子类server实现，便利其下的service对象挨个调用start方法</li><li>start方法由父类LifecycleBase实现的，所以会执行LifecycleBase的start方法，此时因为对象状态已经不是new状态了，init方法不会执行，继续执行startInternal方法，以此类推最终所有元素的start方法会被执行</li></ol><p>最终各个元素的init和start方法都被执行了一遍</p><h2 id="二、内嵌tomcat" tabindex="-1"><a class="header-anchor" href="#二、内嵌tomcat" aria-hidden="true">#</a> 二、内嵌Tomcat</h2><p>阿帕奇提供了一个类，名字就叫Tomcat。该类和Catalina类十分相似，内部也有一个Server对象并且提供了start方法，本质也是调用的server.start。接下来看看这个类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tomcat</span> <span class="token punctuation">{</span>
    <span class="token comment">//全局变量</span>
    <span class="token keyword">protected</span> <span class="token class-name">Server</span> server<span class="token punctuation">;</span>
    <span class="token comment">//启动方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span> <span class="token punctuation">{</span>
        <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//本质是server的start方法</span>
        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//重点在后边的这几个方法</span>

    <span class="token comment">//获取server</span>
    <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> server<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//这里直接new对象了 不像Catalina那样需要解析server.xml文件</span>
        server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">initBaseDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">//顺便为其创建了一个service对象</span>
        <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Tomcat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        server<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> server<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取service 内部调用了getServer 一样的道理 没有就new</span>
    <span class="token keyword">public</span> <span class="token class-name">Service</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取引擎 一样的逻辑 没有就new</span>
    <span class="token keyword">public</span> <span class="token class-name">Engine</span> <span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Engine</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        engine<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span> <span class="token string">&quot;Tomcat&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        engine<span class="token punctuation">.</span><span class="token function">setDefaultHost</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        engine<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token function">createDefaultRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">setContainer</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> engine<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取host 同上没有就new</span>
    <span class="token keyword">public</span> <span class="token class-name">Host</span> <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Engine</span> engine <span class="token operator">=</span> <span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>engine<span class="token punctuation">.</span><span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Host</span><span class="token punctuation">)</span> engine<span class="token punctuation">.</span><span class="token function">findChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Host</span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        host<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> host<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终可以发现内嵌Tomcat本质上和Catalina对象一样，都是通过初始化一个Server对象然后调用Server对象的start方法完成tomcat启动的。区别就是初始化Server的过程不在需要解析server.xml文件了，各种get就能完成初始化。</p><h2 id="三、springboot启动tomcat的时机" tabindex="-1"><a class="header-anchor" href="#三、springboot启动tomcat的时机" aria-hidden="true">#</a> 三、Springboot启动Tomcat的时机</h2><p>springboot启动类的mian方法中会执行SpringApplication.run方法，该方法会创建并启动一个容器<code>AnnotationConfigServletWebServerApplicationContext</code>,容器启动会执行祖先类<code>AbstractApplicationContext</code>的refresh方法，该方法中的onRefresh方法被<code>AnnotationConfigServletWebServerApplicationContext</code>的父类<code>ServletWebServerApplicationContext</code>重写了，内置Tomcat就在onRefresh方法中被启动了。</p><h3 id="_3-1-servletwebserverapplicationcontext" tabindex="-1"><a class="header-anchor" href="#_3-1-servletwebserverapplicationcontext" aria-hidden="true">#</a> 3.1 ServletWebServerApplicationContext</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">GenericWebApplicationContext</span>
        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableWebServerApplicationContext</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建web服务</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to start web server&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebServer</span> webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">StartupStep</span> createWebServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&quot;spring.boot.webserver.create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//从spring容器中获取TomcatServletWebServerFactory如果没注入则直接进行注入</span>
            <span class="token class-name">ServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            createWebServer<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">&quot;factory&quot;</span><span class="token punctuation">,</span> factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取WebServer</span>
            createWebServer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">&quot;webServerGracefulShutdown&quot;</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">WebServerGracefulShutdownLifecycle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">&quot;webServerStartStop&quot;</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">WebServerStartStopLifecycle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot initialize servlet context&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-tomcatservletwebserverfactory" tabindex="-1"><a class="header-anchor" href="#_3-2-tomcatservletwebserverfactory" aria-hidden="true">#</a> 3.2 TomcatServletWebServerFactory</h3><p>通过<code>ServletWebServerFactoryConfiguration</code>完成<code>TomcatServletWebServerFactory</code>注入，同时会注入一些个性化接口，这些接口会在<code>TomcatServletWebServerFactory</code>的构造器中被调用。个性化接口有：</p><ol><li><code>TomcatContextCustomizer</code></li><li><code>TomcatConnectorCustomizer</code></li><li><code>TomcatProtocolHandlerCustomizer</code></li></ol><p>最终会通过<code>TomcatServletWebServerFactory</code>工厂类构建<code>WebServer</code>对象，跟<code>getWebServer</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatServletWebServerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractServletWebServerFactory</span>
        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableTomcatWebServerFactory</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">WebServer</span> <span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//准备上下文</span>
        <span class="token keyword">return</span> <span class="token function">getTomcatWebServer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareContext</span><span class="token punctuation">(</span><span class="token class-name">Host</span> host<span class="token punctuation">,</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token function">configureContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> initializersToUse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置上下文</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TomcatStarter</span> starter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatStarter</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建tomcat启动类</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">TomcatEmbeddedContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TomcatEmbeddedContext</span> embeddedContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TomcatEmbeddedContext</span><span class="token punctuation">)</span> context<span class="token punctuation">;</span>
            embeddedContext<span class="token punctuation">.</span><span class="token function">setStarter</span><span class="token punctuation">(</span>starter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            embeddedContext<span class="token punctuation">.</span><span class="token function">setFailCtxIfServletStartFails</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//此处的context是org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext</span>
        context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>starter<span class="token punctuation">,</span> <span class="token constant">NO_CLASSES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工厂类中会创建<code>Tomcat</code>对象，并初始化其内部的<code>Server</code>对象。最终将<code>Tomcat</code>对象封装到<code>TomcatWebServer</code>中返回，接着看下<code>TomcatWebServer</code>的构造器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatWebServer</span> <span class="token keyword">implements</span> <span class="token class-name">WebServer</span> <span class="token punctuation">{</span>
    <span class="token comment">//用于封装Tomcat对象</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Tomcat</span> tomcat<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TomcatWebServer</span><span class="token punctuation">(</span><span class="token class-name">Tomcat</span> tomcat<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoStart<span class="token punctuation">,</span> <span class="token class-name">Shutdown</span> shutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">,</span> <span class="token string">&quot;Tomcat Server must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//初始化Tomcat对象</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tomcat <span class="token operator">=</span> tomcat<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>autoStart <span class="token operator">=</span> autoStart<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gracefulShutdown <span class="token operator">=</span> <span class="token punctuation">(</span>shutdown <span class="token operator">==</span> <span class="token class-name">Shutdown</span><span class="token punctuation">.</span><span class="token constant">GRACEFUL</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">GracefulShutdown</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//重点看这里 这里启动了Tomcat</span>
        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//启动了Tomcat</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WebServerException</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Tomcat initialized with port(s): &quot;</span> <span class="token operator">+</span> <span class="token function">getPortsDescription</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>monitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token comment">// Start the server to trigger initialization listeners</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里可以知道工厂类在构造WebServer之后，Tomcat就被启动了，这里就是内嵌Tomcat的启动时机。和原来相比，原来的启动类是Tomcat，再由Tomcat启动触发容器的创建和启动，而现在的启动类是容器，由容器启动触发了Tomcat的启动。</p><h2 id="四、springboot中的tomcat如何加载servlet" tabindex="-1"><a class="header-anchor" href="#四、springboot中的tomcat如何加载servlet" aria-hidden="true">#</a> 四、SpringBoot中的Tomcat如何加载Servlet</h2><h3 id="_4-1-servlet3-0标准可以不使用web-xml完成servlet的注册" tabindex="-1"><a class="header-anchor" href="#_4-1-servlet3-0标准可以不使用web-xml完成servlet的注册" aria-hidden="true">#</a> 4.1 Servlet3.0标准可以不使用web.xml完成Servlet的注册</h3><p>早期的项目一个web.xml文件最终被解析成一个Context对象【容器对象】，web.xml内部可以配置很多servlet，最终在解析完web.xml会将解析出来的servlet对象注册到容器中。而springboot项目中并没有web.xml文件，所以引发了一个问题。Servlet对象是如何被注册到Tomcat容器中的呢？ servlet3.0标准中提供了一个不用web.xml也能加载Servlet的方法。</p><div class="hint-container info"><p class="hint-container-title">需要三步</p><ol><li>写一个类实现<code>ServletContainerInitializer</code>接口</li><li>实现<code>ServletContainerInitializer</code>接口的<code>onStartup</code>方法</li><li>在<code>/META-INF/services</code>目录下创建<code>javax.servlet.ServletContainerInitializer</code>文件，将实现类的全名称写入到配置文件中</li></ol></div><p>实现完以上步骤,Tomcat启动后会回调实现类的onStartup方法，并将Servlet容器的装饰类【ServletContext】当作入参传入onStartup方法。看下ServletContext这个类的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> <span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token class-name">String</span> servletName<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> <span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token class-name">String</span> servletName<span class="token punctuation">,</span> <span class="token class-name">Servlet</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> <span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token class-name">String</span> servletName<span class="token punctuation">,</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Servlet</span><span class="token punctuation">&gt;</span></span> servletClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类有很多方法,其中新增servlet的就有3个重载方法。也就是说我们写的实现类在实现onStartup的方法中就可以调用ServletContext的addServlet方法完成Servlet的注册了。</p><h3 id="_4-2-springboot中的servletcontainerinitializer的实现类" tabindex="-1"><a class="header-anchor" href="#_4-2-springboot中的servletcontainerinitializer的实现类" aria-hidden="true">#</a> 4.2 SpringBoot中的ServletContainerInitializer的实现类</h3><p>那么SpringBoot中的Tomcat就是用这个方式加载的Servlet吗？是也不全是。springboot确实搞了一个实现类<code>TomcatStarter</code>来实现<code>ServletContainerInitializer</code>接口并实现了onStartup方法。但是和web.xml文件一样<code>javax.servlet.ServletContainerInitializer</code>文件在springboot项目中也没有。其实与写<code>javax.servlet.ServletContainerInitializer</code>文件的方式相比还有一种更加简单粗暴的方式，在Context对象创建好后直接调用其<code>addServletContainerInitializer</code>方法将<code>ServletContainerInitializer</code>的实现类传进去。再次看下创建Context对象的地方。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatServletWebServerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractServletWebServerFactory</span>
        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableTomcatWebServerFactory</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>

    <span class="token comment">//创建Servlet容器</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareContext</span><span class="token punctuation">(</span><span class="token class-name">Host</span> host<span class="token punctuation">,</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> documentRoot <span class="token operator">=</span> <span class="token function">getValidDocumentRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//直接new了一个容器 该类是StandardContext的子类</span>
        <span class="token class-name">TomcatEmbeddedContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatEmbeddedContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>documentRoot <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoaderHidingResourceRoot</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializersToUse <span class="token operator">=</span> <span class="token function">mergeInitializers</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将容器放入host对象中</span>
        host<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这个方法之前没根 这次下这个方法</span>
        <span class="token function">configureContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> initializersToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">postProcessContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建了ServletContainerInitializer的实现类</span>
        <span class="token class-name">TomcatStarter</span> starter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatStarter</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">//这里直接将其放入到了容器中</span>
        context<span class="token punctuation">.</span><span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>starter<span class="token punctuation">,</span> <span class="token constant">NO_CLASSES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-servletcontainerinitializer的实现类执行onstartup方法的时机" tabindex="-1"><a class="header-anchor" href="#_4-3-servletcontainerinitializer的实现类执行onstartup方法的时机" aria-hidden="true">#</a> 4.3 ServletContainerInitializer的实现类执行onStartup方法的时机</h3><p>之前分析过<code>server.start</code>方法执行后各个元素的init、start、initInternal、startInternal都会被调用，Context对象也不例外。接着看下Context的startInternal方法。虽然我们的Context对象类型是<code>TomcatEmbeddedContext</code>，但是startInternal方法是由其父类<code>StandardContext</code>实现的。所以看下<code>StandardContext</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardContext</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerBase</span> <span class="token keyword">implements</span> <span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">NotificationEmitter</span> <span class="token punctuation">{</span>
    <span class="token comment">//内部有一个集合 用于保存所有ServletContainerInitializer的实现类</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletContainerInitializer</span><span class="token punctuation">,</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> initializers <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//还记得这个方法吗TomcatEmbeddedContext就是通过该方法将TomcatStarter添加进来的</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addServletContainerInitializer</span><span class="token punctuation">(</span>
            <span class="token class-name">ServletContainerInitializer</span> sci<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        initializers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sci<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//Tomcat启动时会执行该方法 这个方法巨长无比 我只把关键的保留了</span>
    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">startInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">LifecycleException</span> <span class="token punctuation">{</span>
        <span class="token comment">//便利集合</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletContainerInitializer</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span>
                initializers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">//集合中的key就是ServletContainerInitializer的实现类 这里调用了onStartup方法</span>
                    entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token comment">//最后看下getServletContext方法，看看容器的装饰类到底是什么</span>
                            <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;standardContext.sciFail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token comment">//这里可以知道容器最终把自己封装到了ApplicationContext对象中，</span>
   <span class="token comment">//最终将ApplicationContext对象暴露给ServletContainerInitializer实现类</span>
   <span class="token keyword">public</span> <span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>altDDName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">Globals</span><span class="token punctuation">.</span><span class="token constant">ALT_DD_ATTR</span><span class="token punctuation">,</span>altDDName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是容器对象启动后，在执行其<code>startInternal</code>方法是会调用<code>ServletContainerInitializer</code>的实现类的onStartup方法并将容器对象的装饰类<code>ApplicationContext</code>当作入参传入onStartup方法。</p><h3 id="_4-4-分析tomcatstarter的onstartup方法" tabindex="-1"><a class="header-anchor" href="#_4-4-分析tomcatstarter的onstartup方法" aria-hidden="true">#</a> 4.4 分析TomcatStarter的onStartup方法</h3><p>铺垫了那么多，我们看下TomcatStarter的onStartup方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TomcatStarter</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span>
    <span class="token comment">//一堆ServletContextInitializer接口的实现类</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">;</span>
    <span class="token comment">//构造器 初始化内部的initializers属性</span>
    <span class="token class-name">TomcatStarter</span><span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>initializers <span class="token operator">=</span> initializers<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//这个方法里没有任何servlet的添加操作，而是便利了initializers，并执行initializers每一个实例的onStartup方法，将servletContext当入参传入其中</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> classes<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span> initializer <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和想象中的不一样，<code>onStartup</code>方法中并没有添加servlet，而是将<code>ServletContext</code>对象再次传给了<code>ServletContextInitializer</code>的实现类去完成后续工作。为什么要这样做呢？其实原因很简单，到目前为止要想拿到<code>ServletContext</code>对象就必须实现<code>ServletContainerInitializer</code>接口。而<code>ServletContainerInitializer</code>接口并不是spring的类。所以spring搞了一个自己的接口<code>ServletContextInitializer</code>并且内部也有一个待实现的方法onStartup。spring想实现的目标是所有实现了<code>ServletContextInitializer</code>接口的bean都能拿到<code>ServletContext</code>对象。最终借助<code>TomcatStarter</code>类中的<code>onStartup</code>完成了实现。 大致看下实现过程，起点在<code>ServletWebServerApplicationContext</code>类中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">GenericWebApplicationContext</span>
        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableWebServerApplicationContext</span> <span class="token punctuation">{</span>

    <span class="token comment">//最终这个私有方法会被调用，可以看出如果TomcatStarter中的onStartup方法能调用到该方法，上述说的spirng目的就达成了</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">selfInitialize</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token function">prepareWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">registerApplicationScope</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">registerEnvironmentBeans</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里拿到容器中所有实现了ServletContextInitializer接口的bean并依次执行其onStartup方法 入参是servletContext</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span> beans <span class="token operator">:</span> <span class="token function">getServletContextInitializerBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beans<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//ServletContextInitializer本身是一个@FunctionalInterface</span>
    <span class="token comment">//这里将上述的私有方法封装成了一个ServletContextInitializer实例 很感慨既然还能这样干</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContextInitializer</span> <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">selfInitialize</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//还记得这个方法吗，这里通过factory完成了WebServer的创建，也就是tomcat启动的位置</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WebServer</span> webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//这里将ServletContextInitializer实例传入到了TomcatServletWebServerFactory中</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述可以看到spring用一种很诡异的方式将一个私有方法封装成了<code>ServletContextInitializer</code>实例并传给了<code>TomcatServletWebServerFactory</code>的getWebServer方法中，再次根下<code>TomcatServletWebServerFactory</code>类。这次主要看<code>ServletContextInitializer</code>实例的传递过程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatServletWebServerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractServletWebServerFactory</span>
        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableTomcatWebServerFactory</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>
    <span class="token comment">//这里ServletContextInitializer实例被传入</span>
    <span class="token keyword">public</span> <span class="token class-name">WebServer</span> <span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">//被传入到该方法</span>
        <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">getTomcatWebServer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareContext</span><span class="token punctuation">(</span><span class="token class-name">Host</span> host<span class="token punctuation">,</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//这里做了依次封装 之前的ServletContextInitializer实例就在其中</span>
        <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializersToUse <span class="token operator">=</span> <span class="token function">mergeInitializers</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根这里</span>
        <span class="token function">configureContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> initializersToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">postProcessContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//做了一层扩展</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeInitializers</span><span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">&gt;</span></span> mergedInitializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mergedInitializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initParameters<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>servletContext<span class="token operator">::</span><span class="token function">setInitParameter</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mergedInitializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionConfiguringInitializer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//被传入到mergedInitializers集合中</span>
        mergedInitializers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mergedInitializers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//集合转数组</span>
        <span class="token keyword">return</span> mergedInitializers<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">//最终会将ServletContextInitializer传入TomcatStarter的构造函数，和之前说的完全对应上了</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TomcatStarter</span> starter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatStarter</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过对TomcatStarter的onStartup方法的分析可以知道，所有实现了<code>ServletContextInitializer</code>接口的bean都能拿到ServletContext对象，完成servlet对象的添加</p><h3 id="_4-5-dispatcherservlet如何加载到tomcat容器" tabindex="-1"><a class="header-anchor" href="#_4-5-dispatcherservlet如何加载到tomcat容器" aria-hidden="true">#</a> 4.5 DispatcherServlet如何加载到Tomcat容器</h3><p>springboot会自动装配springmvc，而springmvc的核心类就是<code>DispatcherServlet</code>。上边铺垫了那么多最终看看<code>DispatcherServlet</code>是如何加载到tomcat中的 首先看下自动装配类<code>DispatcherServletAutoConfiguration</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略注解
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略注解
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletConfiguration</span> <span class="token punctuation">{</span>
        <span class="token comment">//这里创建了DispatcherServlet类</span>
        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">DEFAULT_DISPATCHER_SERVLET_BEAN_NAME</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">DispatcherServlet</span> <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span><span class="token class-name">WebMvcProperties</span> webMvcProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略<span class="token class-name">DispatcherServlet</span>构造内容
            <span class="token keyword">return</span> dispatcherServlet<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略注解
        <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletRegistrationConfiguration</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略注解
            <span class="token comment">//重点是这个类，上边的DispatcherServlet会被传入到该类中，最终由该类完成DispatcherServlet向Tomcat容器的注册</span>
            <span class="token keyword">public</span> <span class="token class-name">DispatcherServletRegistrationBean</span> <span class="token function">dispatcherServletRegistration</span><span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span> dispatcherServlet<span class="token punctuation">,</span>
                    <span class="token class-name">WebMvcProperties</span> webMvcProperties<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultipartConfigElement</span><span class="token punctuation">&gt;</span></span> multipartConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">DispatcherServletRegistrationBean</span> registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServletRegistrationBean</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">,</span>
                    webMvcProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_DISPATCHER_SERVLET_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            multipartConfig<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span>registration<span class="token operator">::</span><span class="token function">setMultipartConfig</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> registration<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到自动装配时向spring容器中注册了DispatcherServletRegistrationBean类，该类构造器中包含DispatcherServlet对象。看下DispatcherServletRegistrationBean类的家谱</p><p>可以看到该类实现了ServletContextInitializer接口也就是其能拿到Tomcat容器对象。看下其祖先类RegistrationBean的onStartup方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RegistrationBean</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; was not registered (disabled)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//根这个方法 该方法由子类DynamicRegistrationBean实现</span>
        <span class="token function">register</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下<code>DynamicRegistrationBean</code>类的<code>register</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DynamicRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">Registration<span class="token punctuation">.</span>Dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">RegistrationBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//servlet注册在这里完成 该方法由子类ServletRegistrationBean实现</span>
        <span class="token comment">//servlet注册完后会返回一个registration对象，用于完成servlet-mapping的配置</span>
        <span class="token class-name">D</span> registration <span class="token operator">=</span> <span class="token function">addRegistration</span><span class="token punctuation">(</span>description<span class="token punctuation">,</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>registration <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; was not registered (possibly already registered?)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//servlet的mapping配置在这里完成 该方法由子类ServletRegistrationBean实现</span>
        <span class="token function">configure</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下<code>ServletRegistrationBean</code>类的<code>addRegistration</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Servlet</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">DynamicRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//这里可以看到servletContext.addServlet方法终于被调用了</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> <span class="token function">addRegistration</span><span class="token punctuation">(</span><span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//this.servlet就是DispatcherServlet</span>
        <span class="token keyword">return</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//这里来配置servlet-mapping</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urlMapping <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>urlMappings<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>urlMapping<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>alwaysMapUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            urlMapping <span class="token operator">=</span> <span class="token constant">DEFAULT_MAPPINGS</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>urlMapping<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span>urlMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loadOnStartup<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            registration<span class="token punctuation">.</span><span class="token function">setMultipartConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>springboot使用内嵌Tomcat完成了tomcat的启动。内嵌Tomcat本质上和正常Tomcat的Catalina对象一样都是通过初始化内部的server对象，最终调用server对象的start方法来完成启动的。区别就是server对象的创建构成，前者直接new后者解析server.xml文件</li><li>springboot中tomcat的启动时机是在容器启动时，执行onRefresh方法中。创建webServer对象时启动的。</li><li>springboot基于servlet3.0标准。创建了<code>ServletContainerInitializer</code>的实现类TomcatStarter最终拿到Tomcat容器对象</li><li>springboot基于TomcatStarter拿到的tomcat容器对象做了进一步优化。最终实现了所有实现<code>ServletContextInitializer</code>接口的bean都能拿到tomcat容器</li><li><code>ServletContextInitializer</code>的实现类之一<code>DispatcherServletRegistrationBean</code>完成了<code>DispatcherServlet向tomcat</code>容器的注册</li></ol><h2 id="个性化实现" tabindex="-1"><a class="header-anchor" href="#个性化实现" aria-hidden="true">#</a> 个性化实现</h2><p>通过<code>ServletWebServerFactoryAutoConfiguration</code>导入<code>BeanPostProcessorsRegistrar</code>，该类会注册一个<code>WebServerFactoryCustomizerBeanPostProcessor</code>，该类会调用<code>WebServerFactoryCustomizer</code>的<code>customize</code>方法，通过实现<code>WebServerFactoryCustomizer</code>接口来可以个性化tomcat配置。</p><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><blockquote><p>Question: The valid characters are defined in RFC 7230 and RFC 3986</p></blockquote><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token exception javastacktrace language-javastacktrace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token punctuation">:</span> Invalid character found in the request target [/officeweb_cs?fname=[%E6%A0%87%E6%AE%B5%E7%BC%96%E5%8F%B7202306260101-001]9A062601-001<span class="token punctuation">.</span>XZZF ]<span class="token punctuation">.</span> The valid characters are defined in RFC 7230 and RFC 3986
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">.</span>Http11InputBuffer<span class="token punctuation">.</span><span class="token function">parseRequestLine</span><span class="token punctuation">(</span>Http11InputBuffer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>509<span class="token punctuation">)</span> ~[tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">.</span>Http11Processor<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>Http11Processor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>513<span class="token punctuation">)</span> ~[tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>AbstractProcessorLight<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>AbstractProcessorLight<span class="token punctuation">.</span>java<span class="token punctuation">:</span>65<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>AbstractProtocol$ConnectionHandler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>AbstractProtocol<span class="token punctuation">.</span>java<span class="token punctuation">:</span>881<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Nio2Endpoint$SocketProcessor<span class="token punctuation">.</span><span class="token function">doRun</span><span class="token punctuation">(</span>Nio2Endpoint<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1708<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketProcessorBase<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SocketProcessorBase<span class="token punctuation">.</span>java<span class="token punctuation">:</span>49<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>AbstractEndpoint<span class="token punctuation">.</span><span class="token function">processSocket</span><span class="token punctuation">(</span>AbstractEndpoint<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1184<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Nio2Endpoint<span class="token punctuation">.</span><span class="token function">setSocketOptions</span><span class="token punctuation">(</span>Nio2Endpoint<span class="token punctuation">.</span>java<span class="token punctuation">:</span>340<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Nio2Endpoint$Nio2Acceptor<span class="token punctuation">.</span><span class="token function">completed</span><span class="token punctuation">(</span>Nio2Endpoint<span class="token punctuation">.</span>java<span class="token punctuation">:</span>474<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Nio2Endpoint$Nio2Acceptor<span class="token punctuation">.</span><span class="token function">completed</span><span class="token punctuation">(</span>Nio2Endpoint<span class="token punctuation">.</span>java<span class="token punctuation">:</span>410<span class="token punctuation">)</span> [tomcat-coyote<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>Invoker<span class="token punctuation">.</span><span class="token function">invokeUnchecked</span><span class="token punctuation">(</span>Invoker<span class="token punctuation">.</span>java<span class="token punctuation">:</span>126<span class="token punctuation">)</span> [na<span class="token punctuation">:</span>1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_312]
    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>Invoker$2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Invoker<span class="token punctuation">.</span>java<span class="token punctuation">:</span>218<span class="token punctuation">)</span> [na<span class="token punctuation">:</span>1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_312]
    <span class="token keyword">at</span> sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>AsynchronousChannelGroupImpl$1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>AsynchronousChannelGroupImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span>112<span class="token punctuation">)</span> [na<span class="token punctuation">:</span>1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_312]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1191<span class="token punctuation">)</span> [tomcat-util<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>ThreadPoolExecutor$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>659<span class="token punctuation">)</span> [tomcat-util<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>TaskThread$WrappingRunnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TaskThread<span class="token punctuation">.</span>java<span class="token punctuation">:</span>61<span class="token punctuation">)</span> [tomcat-util<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>8<span class="token punctuation">.</span>5<span class="token punctuation">.</span>76]
    <span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token punctuation">:</span>748<span class="token punctuation">)</span> [na<span class="token punctuation">:</span>1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_312]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tomcat8自带的非法字符拦截机制，异常抛出详见<code>ErrorReportValve</code></p><blockquote><p>方案一：外置<code>tomcat</code>可以通过配置指定<code>error</code>处理页面(对tomcat版本有要求),公司的<code>tomcat8</code>不支持配置<code>errorCode</code>，详见<code>catalina.jar</code>中<code>ErrorReportValve</code></p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Engine</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Catalina<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Valve</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.valves.ErrorReportValve<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">errorCode.400</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>400.html<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">errorCode.404</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>404.html<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">errorCode.500</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500.html<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">showReport</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name">showServerInfo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> 
        <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Engine</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>方案二：<code>springboot</code>可以通过配置关闭异常显示</p></blockquote><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.error.include-stacktrace</span><span class="token punctuation">=</span><span class="token value attr-value">never</span>
<span class="token key attr-name">server.error.include-message</span><span class="token punctuation">=</span><span class="token value attr-value">never</span>
<span class="token key attr-name">server.error.include-binding-errors</span><span class="token punctuation">=</span><span class="token value attr-value">never</span>
<span class="token key attr-name">server.error.include-exception</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>方案三：<code>springboot</code>可以通过实现<code>WebServerFactoryCustomizer</code>接口对<code>ErrorReportValve</code>进行配置</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTomcatWebServerFactoryCustomizer</span>
        <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurableTomcatWebServerFactory</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyTomcatWebServerFactoryCustomizer</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableTomcatWebServerFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        factory<span class="token punctuation">.</span><span class="token function">addContextCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">ErrorReportValve</span> valve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorReportValve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            valve<span class="token punctuation">.</span><span class="token function">setShowServerInfo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            valve<span class="token punctuation">.</span><span class="token function">setShowReport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            valve<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;errorCode.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">File</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCatalinaHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;error.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//File file2 = ResourceUtils.getFile(&quot;classpath:templates/error.ftl&quot;);</span>
                <span class="token class-name">Resource</span> path <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:templates/error.ftl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//File file = path.getFile();  // will fail if not resolvable in the file system</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token class-name">InputStream</span> is <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">IOTools</span><span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            context<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addValve</span><span class="token punctuation">(</span>valve<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>方案四：<code>springboot</code>也可以通过实现<code>TomcatConnectorCustomizer</code>接口进行配置。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTomcatConnectorCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">TomcatConnectorCustomizer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">Connector</span> connector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;relaxedPathChars&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;&lt;&gt;[\\\\]^\`{|}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       connector<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;relaxedQueryChars&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;&lt;&gt;[\\\\]^\`{|}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>方案五：外置tomcat可以通过配置<code>server.xml</code>进行配置</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Conection</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTP/1.1<span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name">relaxedPathChars</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\\,[]^\`{|}%<span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name">relaxedQueryChars</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\\,[]^\`{|,}%<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","tomcatembed.html.vue"]]);export{r as default};
