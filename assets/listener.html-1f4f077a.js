import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-37fbae1f.js";const t="/blog/assets/eclipseplugintools-82efdcad.png",i="/blog/assets/eclipseproject-0fd89885.png",l="/blog/assets/eclipseplugintemplate-b570690d.png",p="/blog/assets/eclipsepluginrunlistener-19461944.png",c="/blog/assets/eclipseplugindependence-4369716c.png",o="/blog/assets/eclipsedebug-353567a0.png",d="/blog/assets/eclipsepluginexport-abbcf6dd.png",u="/blog/assets/ideaproject-0c5fcce8.png",r="/blog/assets/ideabuildplugin-71f50488.png",g={},h=e('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>JUnit Listener是一个Junit的监听器，可以用来监听Junit的执行过程，比如在测试用例执行前后做一些操作，比如在测试用例执行失败后做一些操作。本文主要介绍几种实现方式。</p><h2 id="一、eclipse插件" tabindex="-1"><a class="header-anchor" href="#一、eclipse插件" aria-hidden="true">#</a> 一、eclipse插件</h2><h3 id="_1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-介绍" aria-hidden="true">#</a> 1.1 介绍</h3><p>在eclipse中，可以通过插件的方式来实现Junit Listener，这种方式的好处是可以在eclipse中直接使用，不需要额外的配置。</p><h3 id="_1-2-创建插件工程" tabindex="-1"><a class="header-anchor" href="#_1-2-创建插件工程" aria-hidden="true">#</a> 1.2 创建插件工程</h3><p>在eclipse中，点击help-&gt;Install New Software，然后在Work with中选择<code>--All Available Sites--</code>，然后在Find中输入Eclipse Plug-in Development Environment，然后点击Next，然后一直点击Next，直到安装完成，如下图所示：</p><figure><img src="'+t+'" alt="eclipseplugintools" tabindex="0" loading="lazy"><figcaption>eclipseplugintools</figcaption></figure><p>点击File-&gt;New-&gt;Other，选择Plug-in Project，然后点击Next，然后输入项目名称，然后点击Next，然后选择<code>This plug-in will make contributions to the UI</code>，然后点击Next，输入项目名称。</p><figure><img src="'+i+'" alt="eclipseproject" tabindex="0" loading="lazy"><figcaption>eclipseproject</figcaption></figure><p>点击Create a plug-in using a template选择Hello World Command，然后点击Next，然后点击Finish，如下图所示：</p><figure><img src="'+l+'" alt="eclipseplugintemplate" tabindex="0" loading="lazy"><figcaption>eclipseplugintemplate</figcaption></figure><h3 id="_1-3-创建junit-listener" tabindex="-1"><a class="header-anchor" href="#_1-3-创建junit-listener" aria-hidden="true">#</a> 1.3 创建Junit Listener</h3><p>点击<code>plugn.xml</code>，然后点击Extensions，然后点击Add，然后选择org.junit.runner.notification.RunListener，然后点击Finish，如下图所示：</p><figure><img src="'+p+`" alt="eclipsepluginrunlistener" tabindex="0" loading="lazy"><figcaption>eclipsepluginrunlistener</figcaption></figure><p>也可以直接在<code>plugin.xml</code>中添加如下代码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token prolog">&lt;?eclipse version=&quot;3.4&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>

   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span>
         <span class="token attr-name">point</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.eclipse.jdt.junit.testRunListeners<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testRunListener</span>
            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>eclipse.junit.listener.plugin.handlers.JunitTestRunListener<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testRunListener</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-实现junit-listener" tabindex="-1"><a class="header-anchor" href="#_1-4-实现junit-listener" aria-hidden="true">#</a> 1.4 实现Junit Listener</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitTestRunListener</span> <span class="token keyword">extends</span> <span class="token class-name">TestRunListener</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * A test run session has finished. The test tree can be accessed through
     * the session element.
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * Important: The implementor of this method must not keep the session
     * element when the method is finished.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">session</span>
     *            the test
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionFinished</span><span class="token punctuation">(</span><span class="token class-name">ITestRunSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-引入jar包" tabindex="-1"><a class="header-anchor" href="#_1-5-引入jar包" aria-hidden="true">#</a> 1.5 引入jar包</h3><p>在<code>plugin.xml</code>中点击<code>Runtime</code>，然后找到<code>Classpate</code>点击Add，然后选择需要引入的jar包即可，如下图所示：</p><figure><img src="`+c+'" alt="eclipseplugindependence" tabindex="0" loading="lazy"><figcaption>eclipseplugindependence</figcaption></figure><h3 id="_1-6-启动调试" tabindex="-1"><a class="header-anchor" href="#_1-6-启动调试" aria-hidden="true">#</a> 1.6 启动调试</h3><p>在<code>plugin.xml</code>中点击<code>Overview</code>，然后点击Launch an Eclipse application in Debug mode，然后点击Launch，如下图所示：</p><figure><img src="'+o+'" alt="eclipsedebug" tabindex="0" loading="lazy"><figcaption>eclipsedebug</figcaption></figure><h3 id="_1-7-导出插件" tabindex="-1"><a class="header-anchor" href="#_1-7-导出插件" aria-hidden="true">#</a> 1.7 导出插件</h3><p>选择项目右键点击Export，然后选择Plug-in Development-&gt;Deployable plug-ins and fragments，然后点击Next，然后选择项目，然后点击Finish，如下图所示：</p><figure><img src="'+d+'" alt="eclipsepluginexport" tabindex="0" loading="lazy"><figcaption>eclipsepluginexport</figcaption></figure><h2 id="二、idea插件" tabindex="-1"><a class="header-anchor" href="#二、idea插件" aria-hidden="true">#</a> 二、idea插件</h2><h3 id="_2-1-介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-介绍" aria-hidden="true">#</a> 2.1 介绍</h3><p>在idea中，可以通过插件的方式来实现Junit Listener，这种方式的好处是可以在idea中直接使用，不需要额外的配置。</p><h3 id="_2-2-创建插件工程" tabindex="-1"><a class="header-anchor" href="#_2-2-创建插件工程" aria-hidden="true">#</a> 2.2 创建插件工程</h3><p>点击File-&gt;New-&gt;Project，然后选择IDE Plugin，然后输入项目名称，然后点击Next，然后点击Finish，如下图所示：</p><figure><img src="'+u+`" alt="ideaproject" tabindex="0" loading="lazy"><figcaption>ideaproject</figcaption></figure><h3 id="_2-3-创建junit-listener" tabindex="-1"><a class="header-anchor" href="#_2-3-创建junit-listener" aria-hidden="true">#</a> 2.3 创建Junit Listener</h3><p>编辑<code>plugin.xml</code>，在<code>&lt;extensions defaultExtensionNs=&quot;com.intellij&quot;&gt;</code>中添加如下代码：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span> <span class="token attr-name">defaultExtensionNs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.intellij<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testStatusListener</span> <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.original.idea.junit.listener.JunitTestStatusListener<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-实现junit-listener" tabindex="-1"><a class="header-anchor" href="#_2-4-实现junit-listener" aria-hidden="true">#</a> 2.4 实现Junit Listener</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JunitTestStatusListener</span> <span class="token keyword">extends</span> <span class="token class-name">TestStatusListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSuiteFinished</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AbstractTestProxy</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-引入jar包" tabindex="-1"><a class="header-anchor" href="#_2-5-引入jar包" aria-hidden="true">#</a> 2.5 引入jar包</h3><p>编辑<code>build.gradle.kts</code>添加如下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>dependencies<span class="token punctuation">{</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;com.alibaba:fastjson:1.2.83&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-启动调试" tabindex="-1"><a class="header-anchor" href="#_2-6-启动调试" aria-hidden="true">#</a> 2.6 启动调试</h3><p>点击侧边栏<code>gradle</code>，然后点击<code>Tasks-&gt;intellij-&gt;runIde</code>，然后点击调试运行。</p><h3 id="_2-7-导出插件" tabindex="-1"><a class="header-anchor" href="#_2-7-导出插件" aria-hidden="true">#</a> 2.7 导出插件</h3><p>点击侧边栏<code>gradle</code>，然后点击<code>Tasks-&gt;intellij-&gt;buildPlugin</code>，然后点击运行，如下图所示：</p><figure><img src="`+r+'" alt="ideabuildplugin" tabindex="0" loading="lazy"><figcaption>ideabuildplugin</figcaption></figure>',47),m=[h];function k(v,b){return s(),a("div",null,m)}const _=n(g,[["render",k],["__file","listener.html.vue"]]);export{_ as default};
